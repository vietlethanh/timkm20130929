<%------------------------------------------------------------------------------------------
* Author: Eric J. Smith 
* Description: This template will generate standard CRUD stored procedures for a given 
*   database table.
------------------------------------------------------------------------------------------%>
<%@ CodeTemplate Debug="True" Language="C#" Inherits="CodeSmith.BaseTemplates.SqlCodeTemplate" TargetLanguage="T-SQL"
	Description="Generates standard CRUD procedures based on a database table schema." %>

<%-- Assembly References --%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="System.Data" %>
<%-- Namespace Imports --%>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="CodeSmith.BaseTemplates" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="System" %>
<%@ Assembly Name="SchemaExplorer" %> 
<%@ Assembly Name="System.Design" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Windows.Forms" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer.Design" %>
<%@ Import Namespace="System.IO" %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Source" Optional="True" %>
<?php
/*
 * This file was automatically generated By Code Smith 
 * Modifications will be overwritten when code smith is run
 *
 * PLEASE DO NOT MAKE MODIFICATIONS TO THIS FILE
 * Date Created 5/6/2012<%//= //DateTime.Now %>
 *
 */

/// <summary>
/// Implementations of <%= GetCollectionName(SourceTable) %> represent a <%= GetClassName(SourceTable) %>
///
/// </summary>
chdir("..");
/* TODO: Add code here */
require('config/globalconfig.php');
include_once('class/model_<%= GetPageName(SourceTable.Name) %>.php');

?>
<?php

<%= GetTableVariable(SourceTable) %> = new Model_<%= GetClassName(SourceTable) %>($objConnection);

if ($_pgR["act"] == model_<%= GetClassName(SourceTable) %>::ACT_ADD)
{
	
	if (global_common::isCLogin())
	{
		//get user info
		//$c_userInfo = $_SESSION[consts::SES_C_USERINFO];
		
		//if ($objMenu->getMenuByName($_pgR['name'])) {
		//	echo global_common::convertToXML($arrHeader, array("rs",'info'), array(0,global_common::STRING_NAME_EXIST), array(0,1));
		//	return;
		//}
		<% GenerateGetParams(SourceTable.Columns,2); %>
		//$strName = $_pgR['name'];
		//$strName = global_editor::rteSafe(html_entity_decode($strName,ENT_COMPAT ,'UTF-8' ));
		$resultID = <%= GetTableVariable(SourceTable) %>->insert(<% GenerateAllParam(SourceTable.Columns); %>);
		if ($resultID)
		{
			$arrHeader = global_common::getMessageHeaderArr($banCode);//$banCode
			echo global_common::convertToXML(
					$arrHeader, array("rs", "inf"), 
					array(1, $result), 
					array( 0, 1 )
					);
			return;
		}
		else
		{
			echo global_common::convertToXML($arrHeader, array("rs","info"), array(0,"Input data is invalid"), array(0,1));
			return;
		}
	}
	else
	{
		echo global_common::convertToXML($arrHeader, array("rs",'info'), array(0,global_common::STRING_REQUIRE_LOGIN), array(0,1));
	}
	return;
}
elseif($_pgR['act'] == model_<%= GetClassName(SourceTable) %>::ACT_UPDATE)
{
	if (global_common::isCLogin())
	{
		//l?y th?ng tin user
		//$c_userInfo = $_SESSION[consts::SES_C_USERINFO];
		
        <% GenerateGetParams(SourceTable.Columns,2); %>
        
		//$checkProduct = $objMenu->getMenuByName($_pgR['name']);
		//if ($checkProduct && $checkProduct['menu_id']!= $strID) {
		//	echo global_common::convertToXML($arrHeader, array("rs",'info'), array(0,global_common::STRING_NAME_EXIST), array(0,1));
		//	return;
		//}
		//$strName = $_pgR['name'];
		//$strDetail= $_pgR['detail'];
		$resultID = <%= GetTableVariable(SourceTable) %>->update(<% GenerateAllParam(SourceTable.Columns);%>);
		
		if ($resultID)
		{
			$arrHeader = global_common::getMessageHeaderArr($banCode);//$banCode
			
			echo global_common::convertToXML(
					$arrHeader, array("rs", "inf"), 
					array(1, $result ), 
					array( 0, 1 )
					);
			return;
		}
		else
		{
			echo global_common::convertToXML($arrHeader, array("rs"), array(0), array(0));
			return;
		}
	}
	else
	{
		echo global_common::convertToXML($arrHeader, array("rs",'info'), array(0,global_common::STRING_REQUIRE_LOGIN), array(0,1));
	}
	return;
}
elseif($_pgR['act'] == model_<%= GetClassName(SourceTable) %>::ACT_CHANGE_PAGE)
{
	$intPage = $_pgR['p'];
	
	$outPutHTML =  <%= GetTableVariable(SourceTable) %>->getList<%= GetClassName(SourceTable.Name) %>($intPage);
	echo global_common::convertToXML($strMessageHeader, array('rs','inf'), array(1,$outPutHTML),array(0,1));
	return ;
}
elseif($_pgR['act'] == model_<%= GetClassName(SourceTable) %>::ACT_SHOW_EDIT)
{
	
	$str<%= GetClassName(SourceTable) %>ID = $_pgR['id'];
	$arr<%= GetClassName(SourceTable) %> =  <%= GetTableVariable(SourceTable) %>->get<%= GetClassName(SourceTable) %>ByID($str<%= GetClassName(SourceTable) %>ID);
	
	echo global_common::convertToXML($strMessageHeader, array('rs',<% GenerateResponeName(SourceTable); %>), array(1,<% GenerateResponeName(SourceTable); %>),array(0,<% GenerateResponeType(SourceTable); %>));
	return ;
}
elseif ($_pgR["act"] == model_<%= GetClassName(SourceTable) %>::ACT_GET)
{		
	$sectionID = $_pgR["sect"];
	$arrSection= $objMenu->getAllMenuBySection($sectionID);
	if($arrSection)
	{
		$strHTML = $objMenu->outputHTMLMenu($arrSection);
		echo global_common::convertToXML($arrHeader, array("rs", "inf"), 
				array(1, $strHTML), array(0, 1));
		return;	
	}
	else
	{
		echo global_common::convertToXML($arrHeader, array("rs",'inf'),array(0,'Kh?ng c? nh?m h?ng'),array(0,0));
		return ;
	}
}
elseif($_pgR['act'] == model_<%= GetClassName(SourceTable) %>::ACT_DELETE)
{
	
	$IDName = "menu_id";
	$contentID = $_pgR["id"];
	$strTableName = user_menu::TBL_T_MENU;
	$result = global_common::updateDeleteFlag($contentID,$IDName,$strTableName ,$_pgR["status"],$objConnection);
	if($result)
	{
		$IDName = "content_id";
		$strTableName = user_faq::TBL_T_FAQ;
		$result = global_common::updateDeleteFlag($contentID,$IDName,$strTableName ,$_pgR["status"],$objConnection);
	}
	$arrHeader = global_common::getMessageHeaderArr($banCode=0,0);
	$arrKey = array("rs","id");
	$arrValue = array($result?1:0,$contentID);
	$arrIsMetaData = array(0, 1);
	echo global_common::convertToXML($arrHeader, $arrKey, $arrValue, $arrIsMetaData);
	
	return;
}
?>

<?php
include_once('include/_admin_header.inc');
include_once('include/_admin_menu.inc');
?>
<script type="text/javascript" src="<?php echo $_objSystem->locateJs('sela_<%= GetClassName(SourceTable) %>.js');?>"></script>
	
<!--Begin Form Input -->
<input type="hidden" id="adddocmode" name="adddocmode" value="1<?php //echo $intMode;?>" />
<input type="hidden" id="txtPage" name="txtPage" value="<?php echo $_pgR["p"]?$intPage:1;?>" />
<input type="hidden" id="txtID" name="txtID" value="" />
 <center>
<br><h2 align="center">Mananage <%= GetClassName(SourceTable) %></h2>
		<div class="input-field-border input-field-content" >
				<div id="lgTitle" class="div_admin_group_title" style="">
				<span style="cursor:default; font-family:inherit" id='status-add' name='status-add'>Add Mode</span></div>
				
				<div class="div_admin_group_content_inside" style="width: 100%; top: -20px;">
				    <table id="tblPopUp" style="width: 100%;" border="0" cellpadding="2" cellspacing="0">
                        <tbody>
                        <%GetFormInput(SourceTable,6);%>	
                        </tbody>
                    </table>
				</div>
	

				<div class="div_admin_group_content_inside" style="margin: 4px; display: block;" align="center">		
				  <input id="btnOK" value="OK"  style="width: 50px;" onClick="<%= GetGlobalJSVariable(SourceTable)%>.btnSave_OnClick()" type="button" class="btn btn-oliver"> &nbsp;&nbsp;&nbsp;
				  <input id="btnClose" value="Cancel" align="center" style="width: 65px;" onClick="<%= GetGlobalJSVariable(SourceTable)%>.showAddMode()" type="button" class="btn btn-oliver">  
			  </div>					
		</div>	
	
		</center>
<!--End Form Input -->

   <div  id="content-admin" >
                    <div align="center">
	                    <h2>Danh s?ch</h2>									
					</div>
					<div id="list-content" style="padding:10px">
						<?php echo <%= GetTableVariable(SourceTable) %> ->getList<%= GetClassName(SourceTable)%>(1) ?>					
						</div>
	</div>

<?php 
//footer
include_once('include/_admin_footer.inc');
?>
<script runat="template">
/*
public static string GetClassName(string name)
{									
	if(name.EndsWith("s") && !name.EndsWith("ss"))
	{
		name = name.Substring(0,name.Length - 1);
	}
	if(name.EndsWith("sse"))
	{
		name = name.Substring(0,name.Length - 1);
	}
	name = name.Replace("_","");
    return name.Replace(" ","");			
}*/

public static string GetClassName(string name)
{									
	if(name.EndsWith("s") && !name.EndsWith("ss"))
	{
		//name = name.Substring(0,name.Length - 1);
	}
	if(name.EndsWith("sse"))
	{
		name = name.Substring(0,name.Length - 1);
	}
	int index = name.IndexOf("_");
    if(name.Length >= index + 1){
        name = name.Substring(index+1);
        index = name.IndexOf("_");
        while(index != -1)
        {
            if(name.Length >= index + 2){
                name =  name.Substring(0,index)+ name[index+1].ToString().ToUpper() + name.Substring(index+2);
                index = name.IndexOf("_");
            }
            else
            {
                index = -1;
            }
        }
    }
   
    //index = name.IndexOf("-");
   // name = name.Substring(index+1);
    name  = name.Replace(" ","");			
    return name[0].ToString().ToUpper() + name.Substring(1);;
}

public static string GetPageName(string name)
{									
	if(name.EndsWith("s") && !name.EndsWith("ss"))
	{
		//name = name.Substring(0,name.Length - 1);
	}
	if(name.EndsWith("sse"))
	{
		name = name.Substring(0,name.Length - 1);
	}
	int index = name.IndexOf("_");
    if(name.Length >= index + 1){
        name = name.Substring(index+1);
        index = name.IndexOf("_");
        while(index != -1)
        {
            if(name.Length >= index + 2){
                name =  name.Substring(0,index)+ name[index+1].ToString().ToUpper() + name.Substring(index+2);
                index = name.IndexOf("_");
            }
            else
            {
                index = -1;
            }
        }
    }
   
    //index = name.IndexOf("-");
   // name = name.Substring(index+1);
    name  = name.Replace(" ","");			
    return name;
}

public static string GetTableVariable(TableSchema name)
{
    string tableName = GetClassName(name);
    return "$obj"+tableName;
}

public static string GetCollectionName(string name)
{			 			
	if(!name.EndsWith("s"))
	{
		name = name + "s";
	}
	if(name.EndsWith("ss"))
	{
		name = name + "es";
	}
	name = name.Replace("_","");
    return name.Replace(" ","");
	
}	
public static string GetClassName(TableSchema table)
{
	return GetClassName(table.Name); 
}

public static string GetTableName(TableSchema table,bool isUpper)
{
    if(isUpper)
    {
	    return table.Name.ToUpper();
    }
    else    
    {
        return table.Name.ToLower();
    }
}

public static string GetCollectionName(TableSchema table)
{			
	return GetCollectionName(table.Name);			
}

public static string GetMemberVariableDeclarationStatement(
			string protectionLevel, ColumnSchema column)
{
	string statement = protectionLevel + " ";
	statement += (column.AllowDBNull ? "object" : GetCSharpVariableType(column)) + " " + GetMemberVariableName(column);			
	
        string defaultValue = GetMemberVariableDefaultValue(column);
	    if (defaultValue != "" && !column.AllowDBNull)
	    {
		    statement += " = " + defaultValue;
	    }

	statement += ";";
	
	return statement;
}
public static string GetCSharpVariableType(ColumnSchema column)
{
	if (column.Name.EndsWith("TypeCode")) return column.Name;

	switch (column.DataType)
	{
		case DbType.AnsiString: return "string";
		case DbType.AnsiStringFixedLength: return "string";
		case DbType.Binary: return "byte[]";
		case DbType.Boolean: return "bool";
		case DbType.Byte: return "byte";
		case DbType.Currency: return "decimal";
		case DbType.Date: return "DateTime";
		case DbType.DateTime: return "DateTime";
		case DbType.Decimal: return "decimal";
		case DbType.Double: return "double";
		case DbType.Guid: return "Guid";
		case DbType.Int16: return "short";
		case DbType.Int32: return "int";
		case DbType.Int64: return "long";
		case DbType.Object: return "object";
		case DbType.SByte: return "sbyte";
		case DbType.Single: return "float";
		case DbType.String: return "string";
		case DbType.StringFixedLength: return "string";
		case DbType.Time: return "TimeSpan";
		case DbType.UInt16: return "ushort";
		case DbType.UInt32: return "uint";
		case DbType.UInt64: return "ulong";
		case DbType.VarNumeric: return "decimal";
		default:
		{
			return "__UNKNOWN__" + column.NativeType;
		}
	}
}

public static bool CheckExceptionColummn(ColumnSchema column )
{
    if(column.Name == "CreatedBy" || column.Name == "CreatedDate" 
        || column.Name == "ModifiedBy" || column.Name == "ModifiedDate"
        || column.Name == "DeletedBy" || column.Name == "DeletedDate"
        || column.Name == "IsDeleted" )
    {
        return true;
    }
    
    return false;
}

public static string GetMemberVariableName(ColumnSchema column)
{
	string propertyName = GetPropertyName(column);
	string memberVariableName = "_" + GetCamelCaseName(propertyName);

	return memberVariableName;
}
public static string GetPropertyName(ColumnSchema column)
{
	string propertyName = column.Name;			

	if (propertyName.EndsWith("TypeCode")) propertyName = propertyName.Substring(0, propertyName.Length - 4);

	return propertyName;
}
//Name to display as a variable
public static string GetPropertyVariable(ColumnSchema column)
{
	string propertyName = column.Name;			

	if (propertyName.EndsWith("TypeCode")) propertyName = propertyName.Substring(0, propertyName.Length - 4);

	return propertyName[0].ToString().ToLower() + propertyName.Substring(1);
}
public static string GetMemberVariableDefaultValue(ColumnSchema column)
{			
	switch (column.DataType)
	{
		case DbType.Guid:
		{
			return "Guid.Empty";
		}
		case DbType.AnsiString:
		case DbType.AnsiStringFixedLength:
		case DbType.String:
		case DbType.StringFixedLength:
		{
			return "String.Empty";
		}
		default:
		{
			return "";
		}
	}
}

public static string GetCamelCaseName(string value)
{
	return value.Substring(0, 1).ToLower() + value.Substring(1);
}
public static string GetMemberVariableDeclarationStatement(ColumnSchema column)
{
	return GetMemberVariableDeclarationStatement("private", column);
}

public static string GetMemberListVariableContructor(TableSchema table)
{
	string str="";
	string strType;
	string strVar;
	for (int i = 0; i < table.Columns.Count; i++)
	{
			strType= GetCSharpVariableType(table.Columns[i]);
			strVar = table.Columns[i].Name;
			str += strType +" m_"+ strVar + ",";
	}
	str = str.Substring(0,str.Length-1);
	return str;
}

public static string GetMemberVariableContructor(ColumnSchema column)
{	
	return " m_"+ column.Name ;
}

public void GenerateAllParam(ColumnSchemaCollection columns)
{
    ColumnSchemaCollection filteredColumns = columns;
	for (int i = 0; i < filteredColumns.Count; i++)
	{
        if(CheckExceptionColummn(filteredColumns[i]) == false)
        {
            if(i != filteredColumns.Count - 1)
            {
                Response.Write("$"+GetPropertyVariable(filteredColumns[i]) +",");
            }
            else
            {
                Response.Write("$"+GetPropertyVariable(filteredColumns[i]));
            }
        }
	}
}

#region Code Generation Helpers
public string GetTableOwner()
{
	return GetTableOwner(true);
}

public string GetTableOwner(bool includeDot)
{
	if (SourceTable.Owner.Length > 0)
	{
		if (includeDot)
		{
			return "[" + SourceTable.Owner + "].";
		}
		else
		{
			return "[" + SourceTable.Owner + "]";
		}
	}
	else
	{
		return "";
	}
}

public void GenerateIndent(int indentLevel)
{
    for (int i = 0; i < indentLevel; i++)
	{
		Response.Write('\t');
	}
}

public void GenerateGetParams(ColumnSchemaCollection columns, int indentLevel)
{
    Response.WriteLine("");
   	ColumnSchemaCollection filteredColumns = columns;
    for (int i = 0; i < filteredColumns.Count; i++)
	{
        if(CheckExceptionColummn(filteredColumns[i] ) == false)
        {
            string variable = GetPropertyVariable(filteredColumns[i]);
            string fieldName = filteredColumns[i].Name;
            GenerateIndent(indentLevel);
            Response.WriteLine("$"+variable+" = $_pgR['"+fieldName+"'];");
            GenerateIndent(indentLevel);
            Response.WriteLine("$"+variable+" = global_editor::rteSafe(html_entity_decode($"+variable+",ENT_COMPAT ,'UTF-8' ));");
        }
	}
}

public void GenerateResponeName(TableSchema table)
{
   	ColumnSchemaCollection filteredColumns = table.Columns;
  
	for (int i = 0; i < filteredColumns.Count; i++)
	{       
        if(CheckExceptionColummn(filteredColumns[i] ) == false)
        {
            string variable = GetPropertyVariable(filteredColumns[i]);
            string fieldName = filteredColumns[i].Name;
            Response.Write("'"+fieldName+"'");
            if(i != filteredColumns.Count - 1)
            {
                  Response.Write(",");
            }
        }
	}
}
public void GenerateResponeValue(TableSchema table)
{
   	ColumnSchemaCollection filteredColumns =table.Columns;
	for (int i = 0; i < filteredColumns.Count; i++)
	{       
        if(CheckExceptionColummn(filteredColumns[i] ) == false)
        {
            string variable = GetPropertyVariable(filteredColumns[i]);
            string fieldName = filteredColumns[i].Name;
            Response.Write("$arr"+GetClassName(table)+"'"+fieldName+"'");
            if(i != filteredColumns.Count - 1)
            {
                  Response.Write(",");
            }
        }
	}
}

public void GenerateResponeType(TableSchema table)
{
   	ColumnSchemaCollection filteredColumns =table.Columns;
	for (int i = 0; i < filteredColumns.Count; i++)
	{       
        if(CheckExceptionColummn(filteredColumns[i] ) == false)
        {
            ColumnSchema column = filteredColumns[i];
            if(column.NativeType == "varchar" || column.NativeType == "text")
            {
                Response.Write("1");
            }
            else if(column.NativeType == "int")
            {
               Response.Write("0");
            }
            else if(column.NativeType == "datetime")
            {
               Response.Write("1");  
            }
            else
            {
               Response.Write("0");
            }
            if(i != filteredColumns.Count - 1)
            {
                  Response.Write(",");
            }
        }
	}
}

public void GetFormInput(TableSchema table, int indentLevel)
{
   
    ColumnSchemaCollection filteredColumns =table.Columns;
	for (int i = 0; i < filteredColumns.Count; i++)
	{       
        if(CheckExceptionColummn(filteredColumns[i] ) == false)
        {
            ColumnSchema column = filteredColumns[i];
            GenerateIndent(indentLevel);
            Response.WriteLine("<tr>");
            GenerateIndent(indentLevel+1);
            Response.WriteLine("<td width='110'><span style='cursor:default; font-family:inherit'>"+column.Name+"</span></td>");
            GenerateIndent(indentLevel+1);
            Response.WriteLine("<td width='10'><span class='forceFillForm'></span></td>");
            if(column.NativeType == "varchar")
            {
              
                GenerateIndent(indentLevel+1);
                Response.WriteLine("<td width='567'><input id='txt"+column.Name+"' name='txt"+column.Name+"' value='' style='width: 49.5%;'  maxlength='"+column.Size+"' type='text'></td>");
              
            }            
            else if(column.NativeType == "text")
            {
                GenerateIndent(indentLevel+1);
                Response.WriteLine("<td width='567'><textarea id='txt"+column.Name+"' name='txt"+column.Name+"'  style='width: 49.5%;'  maxlength='"+column.Size+"' ></textarea></td>");
            }
            else if(column.NativeType.IndexOf("int") != -1)
            {
                GenerateIndent(indentLevel+1);
                Response.WriteLine("<td width='567'><input id='txt"+column.Name+"' name='txt"+column.Name+"' value='' style='width: 49.5%;'  maxlength='20' type='text'></td>");
            }
            else if(column.NativeType == "datetime")
            {
                GenerateIndent(indentLevel+1);
                Response.WriteLine("<td width='567'><input id='txt"+column.Name+"' name='txt"+column.Name+"' value='' style='width: 49.5%;'  maxlength='"+column.Size+"' type='text'></td>");
            }
            else if(column.NativeType == "bit")
            {
                GenerateIndent(indentLevel+1);
                Response.WriteLine("<td width='567'><input id='txt"+column.Name+"' name='txt"+column.Name+"' value='' style='width: 49.5%;'  maxlength='"+column.Size+"' type='chec'></td>");
            }
            GenerateIndent(indentLevel);
            Response.WriteLine("</tr>");
        }
	}
}

public static string GetGlobalJSVariable(TableSchema name)
{
    return "_obj"+GetClassName(name);
}
#endregion

#region Procedure Naming

public string GetBySuffix(ColumnSchemaCollection columns)
{
    System.Text.StringBuilder bySuffix = new System.Text.StringBuilder();
	for (int i = 0; i < columns.Count; i++)
	{
	    if (i > 0) bySuffix.Append("And");
	    bySuffix.Append(columns[i].Name);
	}
	
	return bySuffix.ToString();
}
#endregion

#region Template Overrides
// Assign an appropriate file name to the output.
public override string GetFileName()
{
	if (this.SourceTable != null)
	{
		return this.SourceTable.Name + "_Procedures.sql";
	}
	else
	{
		return base.GetFileName();
	}
}

// Override the OutputFile property and assign our specific settings to it.
[Category("2. Options")]
[FileDialog(FileDialogType.Save, Title="Select Output File", Filter="Query Files (*.sql)|*.sql|All Files (*.*)|*.*", DefaultExtension=".sql")]
public override string OutputFile
{
	get {return base.OutputFile;}
	set {base.OutputFile = value;}
}

private void cn_InfoMessage(object sender, System.Data.SqlClient.SqlInfoMessageEventArgs e)
{
	Trace.WriteLine(e.Message);
}

#endregion 
</script>