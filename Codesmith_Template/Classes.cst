<%------------------------------------------------------------------------------------------
* Author: Eric J. Smith 
* Description: This template will generate standard CRUD stored procedures for a given 
*   database table.
------------------------------------------------------------------------------------------%>
<%@ CodeTemplate Debug="True" Language="C#" Inherits="CodeSmith.BaseTemplates.SqlCodeTemplate" TargetLanguage="T-SQL"
	Description="Generates standard CRUD procedures based on a database table schema." %>

<%-- Assembly References --%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="System.Data" %>
<%-- Namespace Imports --%>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="CodeSmith.BaseTemplates" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="System" %>
<%@ Assembly Name="SchemaExplorer" %> 
<%@ Assembly Name="System.Design" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Windows.Forms" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer.Design" %>
<%@ Import Namespace="System.IO" %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Source" Optional="True" %>
<?php
/*
 * This file was automatically generated By Code Smith 
 * Modifications will be overwritten when code smith is run
 *
 * PLEASE DO NOT MAKE MODIFICATIONS TO THIS FILE
 * Date Created 5/6/2012<%//= //DateTime.Now %>
 *
 */

/* <summary>
 * Implementations of <%= GetCollectionName(SourceTable) %> represent a <%= GetClassName(SourceTable) %>
 * </summary>
 */
class Model_<%= GetClassName(SourceTable) %>
{		   
	#region PRESERVE ExtraMethods For <%= GetClassName(SourceTable) %>
	#endregion
    #region Contants	
    const ACT_ADD							= 10;
    const ACT_UPDATE						= 11;
    const ACT_DELETE						= 12;
    const ACT_CHANGE_PAGE					= 13;
    const ACT_SHOW_EDIT                     = 14;
    const ACT_GET                           = 15;
    const NUM_PER_PAGE                      = 15;
    
    const TBL_<%= GetTableName(SourceTable,true) %>			            = '<%= GetTableName(SourceTable,false) %>';

	const SQL_INSERT_<%= GetTableName(SourceTable,true) %>		= 'INSERT INTO `{0}`
		(
            <% GenerateColumns(SourceTable.Columns, 3); %>
        )
        VALUES (
            <% GenerateNoColumms(SourceTable.Columns, 3); %>
        );';
        
	const SQL_UPDATE_<%= GetTableName(SourceTable,true) %>		= 'UPDATE `{0}`
		SET  <% GenerateUpdates(SourceTable.Columns, 3); %>  ';
		   

    const SQL_CREATE_TABLE_<%= GetTableName(SourceTable,true) %>		= 'CREATE TABLE `{0}` (
		 <% GenerateCreateTable(SourceTable.Columns, 3); %>
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;';
	
    #endregion   
    
    #region Variables
	var $_objConnection;
	#end region
	
	#region Contructors
	/**
	*  Phuong th?c kh?i t?o d?i tu?ng faq d?ng th?i t?o connection d?n db
	*
	* @param object $objConnection ??i tu?ng k?t n?i d?n db
			
	* @return void 
	*
	*/
	public function  Model_<%= GetClassName(SourceTable) %>($objConnection)
	{
		$this->_objConnection = $objConnection;
		
	}
    #region
    
    #region Public Functions
    
    public function insert( <% GenerateParamForInsert(SourceTable.Columns); %>)
	{
		$intID = global_common::getMaxID(self::TBL_<%= GetTableName(SourceTable,true) %>);
		
		$strTableName = self::TBL_<%= GetTableName(SourceTable,true) %>;
		$strSQL = global_common::prepareQuery(self::SQL_INSERT_<%= GetTableName(SourceTable,true) %>,
				array(self::TBL_<%= GetTableName(SourceTable,true) %>,$intID,<% GenerateValueForInsert(SourceTable.Columns); %>));
		
		if (!global_common::ExecutequeryWithCheckExistedTable($strSQL,self::SQL_CREATE_TABLE_<%= GetTableName(SourceTable,true) %>,$this->_objConnection,$strTableName))
		{
			//echo $strSQL;
			global_common::writeLog('Error add <%= GetTableName(SourceTable,false) %>:'.$strSQL,1);
			return false;
		}	
		return $intID;
		
	}
    
    public function update(<% GenerateParamForUpdate(SourceTable.Columns); %>)
	{
		$strTableName = self::TBL_<%= GetTableName(SourceTable,true) %>;
		$strSQL = global_common::prepareQuery(self::SQL_UPDATE_<%= GetTableName(SourceTable,true) %>,
				array($strTableName,<% GenerateValueForUpdate(SourceTable.Columns); %> ));
		
		if (!global_common::ExecutequeryWithCheckExistedTable($strSQL,self::SQL_CREATE_TABLE_<%= GetTableName(SourceTable,true) %>,$this->_objConnection,$strTableName))
		{
			//echo $strSQL;
			global_common::writeLog('Error add <%= GetTableName(SourceTable,false) %>:'.$strSQL,1);
			return false;
		}	
		return $intNewID;		
	}
    
    public function get<%= GetClassName(SourceTable) %>ByID($objID,$selectField='*') 
	{		
		$strSQL .= global_common::prepareQuery(global_common::SQL_SELECT_FREE, 
				array($selectField, self::TBL_<%= GetTableName(SourceTable,true) %> ,							
					'WHERE <%= GetPrimaryKey(SourceTable.Columns) %> = \''.$objID.'\' '));
		//echo '<br>SQL:'.$strSQL;
		$arrResult =$this->_objConnection->selectCommand($strSQL);		
		if(!$arrResult)
		{
			global_common::writeLog('get <%= GetTableName(SourceTable,false) %> ByID:'.$strSQL,1,$_mainFrame->pPage);
			return null;
		}
		//print_r($arrResult);
		return $arrResult[0];
	}
    
    public function getAll<%= GetClassName(SourceTable) %>($intPage = 0,$selectField='*',$whereClause='',$orderBy='') 
	{		
        if($whereClause)
		{
			$whereClause = ' WHERE '.$whereClause;
		}
		
		if($orderBy)
		{
			$orderBy = ' ORDER BY '.$orderBy;
		}
        if($intPage>0)
        {
		    $strSQL .= global_common::prepareQuery(global_common::SQL_SELECT_FREE, 
				array($selectField, Model_<%= GetClassName(SourceTable) %>::TBL_<%= GetTableName(SourceTable,true) %> ,							
					$whereClause.$orderBy .' limit '.(($intPage-1)* self::NUM_PER_PAGE).','.self::NUM_PER_PAGE));
        }
        else
        {
            $strSQL .= global_common::prepareQuery(global_common::SQL_SELECT_FREE, 
				array($selectField, Model_<%= GetClassName(SourceTable) %>::TBL_<%= GetTableName(SourceTable,true) %> ,							
					$whereClause.$orderBy ));
        }
		//echo '<br>SQL:'.$strSQL;
		$arrResult =$this->_objConnection->selectCommand($strSQL);		
		if(!$arrResult)
		{
			global_common::writeLog('get All <%= GetTableName(SourceTable,false) %>:'.$strSQL,1,$_mainFrame->pPage);
			return null;
		}
		//print_r($arrResult);
		return $arrResult;
	}
    
    public function getList<%= GetClassName(SourceTable) %>($intPage,$orderBy='<%= GetPrimaryKey(SourceTable)%>', $whereClause)
	{		
        if($whereClause)
        {
            $whereClause='WHERE'+ $whereClause;						
        }
        if($orderBy)
        {
            $orderBy='ORDER BY'+ $orderBy;						
        }
		$strSQL .= global_common::prepareQuery(global_common::SQL_SELECT_FREE,array('*',
					self::TBL_<%= GetTableName(SourceTable,true) %>,$orderBy.' '.$whereClause.' limit '.(($intPage-1)* self::NUM_PER_PAGE).','.self::NUM_PER_PAGE));
		//echo 'sql:'.$strSQL;	
		$arrResult = $this->_objConnection->selectCommand($strSQL);
		//print_r($arrResult);
		$strHTML = '<table class="tbl-list">
                    <thead>
                    <%GetTableHeader(SourceTable,5);%>
                    </thead>
                    <tbody>';
		$icount = count($arrmenu);
		for($i=0;$i<$icount;$i++)
		{
			$strHTML.='<tr class="'.($i%2==0?'even':'odd').'">
					    <%GetTableValue(SourceTable,"$arrResult",6);%>
					  </tr>';
		}
		$strHTML.='</tbody></table>';
		
		$strHTML .= "<div>".global_common::getPagingHTMLByNum($intPage,self::NUM_PER_PAGE,global_common::getTotalRecord(self::TBL_<%= GetTableName(SourceTable,true) %>,$this->_objConnection),
				"_objMenu.changePage")."</div>";
		return $strHTML;
	}
    
    #endregion   
}
?>
<script runat="template">
/*
public static string GetClassName(string name)
{									
	if(name.EndsWith("s") && !name.EndsWith("ss"))
	{
		name = name.Substring(0,name.Length - 1);
	}
	if(name.EndsWith("sse"))
	{
		name = name.Substring(0,name.Length - 1);
	}
	name = name.Replace("_","");
    return name.Replace(" ","");			
}*/
//sl_article_typ ->ArticleType
public static string GetClassName(string name)
{									
	if(name.EndsWith("s") && !name.EndsWith("ss"))
	{
		//name = name.Substring(0,name.Length - 1);
	}
	if(name.EndsWith("sse"))
	{
		name = name.Substring(0,name.Length - 1);
	}
	int index = name.IndexOf("_");
    if(name.Length >= index + 1){
        name = name.Substring(index+1);
        index = name.IndexOf("_");
        while(index != -1)
        {
            if(name.Length >= index + 2){
                name =  name.Substring(0,index)+ name[index+1].ToString().ToUpper() + name.Substring(index+2);
                index = name.IndexOf("_");
            }
            else
            {
                index = -1;
            }
        }
    }
    //index = name.IndexOf("-");
   // name = name.Substring(index+1);
    name  = name.Replace(" ","");			
    return name[0].ToString().ToUpper() + name.Substring(1);;
}

public static string GetCollectionName(string name)
{			 			
	if(!name.EndsWith("s"))
	{
		name = name + "s";
	}
	if(name.EndsWith("ss"))
	{
		name = name + "es";
	}
	name = name.Replace("_","");
    return name.Replace(" ","");
	
}	

//sl_article_typ ->ArticleType
public static string GetClassName(TableSchema table)
{
	return GetClassName(table.Name); 
}
//sl_article_type => SL_ARTICLE_TYPE | sl_article_type
public static string GetTableName(TableSchema table,bool isUpper)
{
    if(isUpper)
    {
	    return table.Name.ToUpper();
    }
    else    
    {
        return table.Name.ToLower();
    }
}

public static string GetCollectionName(TableSchema table)
{			
	return GetCollectionName(table.Name);			
}

public static string GetMemberVariableDeclarationStatement(
			string protectionLevel, ColumnSchema column)
{
	string statement = protectionLevel + " ";
	statement += (column.AllowDBNull ? "object" : GetCSharpVariableType(column)) + " " + GetMemberVariableName(column);			
	
        string defaultValue = GetMemberVariableDefaultValue(column);
	    if (defaultValue != "" && !column.AllowDBNull)
	    {
		    statement += " = " + defaultValue;
	    }
	

	statement += ";";
	
	return statement;
}
public static string GetCSharpVariableType(ColumnSchema column)
{
	if (column.Name.EndsWith("TypeCode")) return column.Name;

	switch (column.DataType)
	{
		case DbType.AnsiString: return "string";
		case DbType.AnsiStringFixedLength: return "string";
		case DbType.Binary: return "byte[]";
		case DbType.Boolean: return "bool";
		case DbType.Byte: return "byte";
		case DbType.Currency: return "decimal";
		case DbType.Date: return "DateTime";
		case DbType.DateTime: return "DateTime";
		case DbType.Decimal: return "decimal";
		case DbType.Double: return "double";
		case DbType.Guid: return "Guid";
		case DbType.Int16: return "short";
		case DbType.Int32: return "int";
		case DbType.Int64: return "long";
		case DbType.Object: return "object";
		case DbType.SByte: return "sbyte";
		case DbType.Single: return "float";
		case DbType.String: return "string";
		case DbType.StringFixedLength: return "string";
		case DbType.Time: return "TimeSpan";
		case DbType.UInt16: return "ushort";
		case DbType.UInt32: return "uint";
		case DbType.UInt64: return "ulong";
		case DbType.VarNumeric: return "decimal";
		default:
		{
			return "__UNKNOWN__" + column.NativeType;
		}
	}
}
public static string GetMemberVariableName(ColumnSchema column)
{
	string propertyName = GetPropertyName(column);
	string memberVariableName = "_" + GetCamelCaseName(propertyName);

	return memberVariableName;
}
public static string GetPropertyName(ColumnSchema column)
{
	string propertyName = column.Name;			

	if (propertyName.EndsWith("TypeCode")) propertyName = propertyName.Substring(0, propertyName.Length - 4);

	return propertyName;
}
public static string GetMemberVariableDefaultValue(ColumnSchema column)
{			
	switch (column.DataType)
	{
		case DbType.Guid:
		{
			return "Guid.Empty";
		}
		case DbType.AnsiString:
		case DbType.AnsiStringFixedLength:
		case DbType.String:
		case DbType.StringFixedLength:
		{
			return "String.Empty";
		}
		default:
		{
			return "";
		}
	}
}

public static string GetCamelCaseName(string value)
{
	return value.Substring(0, 1).ToLower() + value.Substring(1);
}
public static string GetMemberVariableDeclarationStatement(ColumnSchema column)
{
	return GetMemberVariableDeclarationStatement("private", column);
}

public static string GetMemberListVariableContructor(TableSchema table)
{
	string str="";
	string strType;
	string strVar;
	for (int i = 0; i < table.Columns.Count; i++)
	{
			strType= GetCSharpVariableType(table.Columns[i]);
			strVar = table.Columns[i].Name;
			str += strType +" m_"+ strVar + ",";
	}
	str = str.Substring(0,str.Length-1);
	return str;
}

public static string GetMemberVariableContructor(ColumnSchema column)
{	
	return " m_"+ column.Name ;
}

#region Code Generation Helpers
public string GetTableOwner()
{
	return GetTableOwner(true);
}

public string GetTableOwner(bool includeDot)
{
	if (SourceTable.Owner.Length > 0)
	{
		if (includeDot)
		{
			return "[" + SourceTable.Owner + "].";
		}
		else
		{
			return "[" + SourceTable.Owner + "]";
		}
	}
	else
	{
		return "";
	}
}


public void GenerateProcedureHeader(string procedureName)
{
	Response.WriteLine("--region {0}", procedureName);
	Response.WriteLine("");
	Response.WriteLine("------------------------------------------------------------------------------------------------------------------------");
	Response.WriteLine("-- Generated By:   {0} using CodeSmith {1}", System.Environment.UserName, typeof(CodeTemplate).Assembly.GetName().Version.ToString());
	Response.WriteLine("-- Template:       {0}", this.CodeTemplateInfo.FileName);
	Response.WriteLine("-- Procedure Name: {0}", procedureName);
	Response.WriteLine("-- Date Generated: {0}", DateTime.Now.ToLongDateString());
	Response.WriteLine("------------------------------------------------------------------------------------------------------------------------");
}

public void GenerateProcedureFooter(string procedureName)
{
	Response.WriteLine("--endregion");
	Response.WriteLine("");
	Response.WriteLine("GO");
	Response.WriteLine("");
}

public void GenerateIndent(int indentLevel)
{
    for (int i = 0; i < indentLevel; i++)
	{
		Response.Write('\t');
	}
}

public void GenerateParameter(ColumnSchema column, int indentLevel, bool isFirst, bool isLast)
{
	GenerateParameter(column, indentLevel, isFirst, isLast, false);
}

public void GenerateParameter(ColumnSchema column, int indentLevel, bool isFirst, bool isLast, bool isOutput)
{
	GenerateIndent(indentLevel);
	Response.Write(GetSqlParameterStatement(column, isOutput));
	if (!isLast) Response.Write(",");
	if (indentLevel >= 0)
	{
		Response.WriteLine("");
	}
	else if (!isLast)
	{
		Response.Write(" ");
	}
}

public void GenerateColumns(ColumnSchemaCollection columns, int indentLevel)
{
	for (int i = 0; i < columns.Count; i++)
	{
		GenerateColumn(columns[i], indentLevel, i == 0, i == columns.Count - 1);
	}
}

public void GenerateColumn(ColumnSchema column, int indentLevel, bool isFirst, bool isLast)
{
	GenerateIndent(indentLevel);
	Response.Write("");
	Response.Write(column.Name);
	Response.Write("");
	if (!isLast) Response.Write(",");
	if (indentLevel >= 0)
	{
		Response.WriteLine("");
	}
	else if (!isLast)
	{
		Response.Write(" ");
	}
}

public void GenerateUpdates(ColumnSchemaCollection columns, int indentLevel)
{
    Response.WriteLine("");
   	ColumnSchemaCollection filteredColumns = columns;
    int noPrimaryColumn=1;
    string primaryColumn="";
	for (int i = 0; i < filteredColumns.Count; i++)
	{
        if(filteredColumns[i].IsPrimaryKeyMember )
        {
            noPrimaryColumn = i+1;
            primaryColumn = filteredColumns[i].Name;
        }
		GenerateUpdate(filteredColumns[i], i+1, indentLevel, i == 0, i == filteredColumns.Count - 1);
	}
    GenerateIndent(indentLevel-1);
    Response.Write("WHERE `"+primaryColumn +"` = \\\'{"+noPrimaryColumn+"}\\\'");
}

public void GenerateUpdate(ColumnSchema column,int noColumn ,int indentLevel, bool isFirst, bool isLast)
{
	GenerateIndent(indentLevel);
	Response.Write("`");
	Response.Write(column.Name);
	Response.Write("` = ");
	Response.Write("\\\'{");
	Response.Write(noColumn);
    Response.Write("}\\\'");
	if (!isLast) Response.Write(",");
	if (indentLevel >= 0)
	{
		Response.WriteLine("");
	}
	else if (!isLast)
	{
		Response.Write(" ");
	}
}

public void GenerateCreateTable(ColumnSchemaCollection columns, int indentLevel)
{
    Response.WriteLine("");
   	ColumnSchemaCollection filteredColumns = columns;
    int noPrimaryColumn=1;
    string primaryColumn="";
	for (int i = 0; i < filteredColumns.Count; i++)
	{
        if(filteredColumns[i].IsPrimaryKeyMember )
        {
            noPrimaryColumn = i+1;
            primaryColumn = filteredColumns[i].Name;
        }
		GenerateCreateProperty(filteredColumns[i],indentLevel, i == 0);
	}
    GeneratePrimaryKey(filteredColumns, indentLevel);
    //GenerateIndent(indentLevel-1);
    
   
}

public void GenerateCreateProperty(ColumnSchema column,int indentLevel, bool isFirst)
{
	GenerateIndent(indentLevel);
	Response.Write("`");
	Response.Write(column.Name);
	Response.Write("` ");
    if(IsTypeHaveSize(column))
    {
        Response.Write(column.NativeType );
        Response.Write("(");
        Response.Write(column.Size / 3 );
        Response.Write(")");
    }
	Response.Write(",");
	if (indentLevel >= 0)
	{
		Response.WriteLine("");
	}
	else
	{
		Response.Write(" ");
	}
}

public bool IsTypeHaveSize(ColumnSchema column)
{
    if(column.NativeType.ToLower().IndexOf("char") != -1)
    {
        return true;
    }
    return false;
}

public string GetPrimaryKey(TableSchema table)
{	
    ColumnSchemaCollection columns = table.Columns;
	for (int i = 0; i < columns.Count; i++)
	{
        if(columns[i].IsPrimaryKeyMember )
        {                       
             return columns[i].Name;
        }       
    }   
    return "";
}


public void GetTableHeader(TableSchema table, int indentLevel)
{
    ColumnSchemaCollection filteredColumns =table.Columns;
	for (int i = 0; i < filteredColumns.Count; i++)
	{     
        ColumnSchema column = filteredColumns[i];
        GenerateIndent(indentLevel+1);
        Response.WriteLine("<td>"+column.Name+"</td>");
	}
}

public void GetTableValue(TableSchema table, string nameResult, int indentLevel )
{
    ColumnSchemaCollection filteredColumns =table.Columns;
	for (int i = 0; i < filteredColumns.Count; i++)
	{   
        ColumnSchema column = filteredColumns[i];
         GenerateIndent(indentLevel);       
        if(i != filteredColumns.Count-1)
        {
            if(column.NativeType != "bit")
            {
                Response.WriteLine("<td>'."+nameResult+"[$i]['"+column.Name+"'].'</td>");
            }
            else
            {
                Response.WriteLine("<td><input type=\"checkbox\" onclick=\""+GetJSGlobalVariable(table.Name)+".showHide(\\\''."+nameResult+"[$i]['"+GetPrimaryKey(table.Columns)+"'].'\\\',\\\''."+nameResult+"[$i]['name'].'\\\',this)\" '.("+nameResult+"[$i]['IsDeleted']?'':'checked=checked').' /></td>");
            }
        }
        else
        {
            if(column.NativeType != "bit")
            {
                Response.WriteLine("<td class=\"lastCell\">'."+nameResult+"[$i]['"+column.Name+"'].'</td>");
            }
            else
            {
                Response.WriteLine("<td class=\"lastCell\"><input type=\"checkbox\" onclick=\""+GetJSGlobalVariable(table.Name)+".showHide(\\\''."+nameResult+"[$i]['"+GetPrimaryKey(table.Columns)+"'].'\\\',\\\''."+nameResult+"[$i]['name'].'\\\',this)\" '.("+nameResult+"[$i]['IsDeleted']?'':'checked=checked').' /></td>");
            }
        }
	}
}

public void GeneratePrimaryKey(ColumnSchemaCollection columns, int indentLevel)
{
	GenerateIndent(indentLevel);
	Response.Write("PRIMARY KEY");
		ColumnSchemaCollection filteredColumns = columns;
    
    bool isFirst = true;
    string primaryColumn="";
    Response.Write("(");
	for (int i = 0; i < filteredColumns.Count; i++)
	{
        if(filteredColumns[i].IsPrimaryKeyMember )
        {                   
            if(isFirst)
            {
                Response.Write( filteredColumns[i].Name);
            }
            else
            {
                Response.Write("," + filteredColumns[i].Name);
            }
            isFirst =  false;
        }       
    }
    Response.WriteLine(")");
}

public void GenerateCondition(ColumnSchema column, int indentLevel, bool isFirst, bool isLast)
{
	GenerateIndent(indentLevel);
	if (!isFirst) Response.Write("AND ");
	Response.Write("[");
	Response.Write(column.Name);
	Response.Write("] = @");
	Response.Write(column.Name);
	if (indentLevel >= 0)
	{
		Response.WriteLine("");
	}
	else if (!isLast)
	{
		Response.Write(" ");
	}
}

public void GenerateConditions(ColumnSchemaCollection columns, int indentLevel)
{
	ColumnSchemaCollection filteredColumns = columns;
	for (int i = 0; i < filteredColumns.Count; i++)
	{
		GenerateCondition(filteredColumns[i], indentLevel, i == 0, i == filteredColumns.Count - 1);
	}
}

public void GenerateNoColumms(ColumnSchemaCollection columns, int indentLevel)
{
    GenerateIndent(indentLevel);
	ColumnSchemaCollection filteredColumns = columns;
	for (int i = 0; i < filteredColumns.Count; i++)
	{
		GenerateNoColumm(i+1, indentLevel, i == 0, i == filteredColumns.Count - 1);
	}
}

public void GenerateNoColumm(int noColumn, int indentLevel, bool isFirst, bool isLast)
{
	Response.Write("\\\'{");
	Response.Write(noColumn);
    Response.Write("}\\\'");
	if (!isLast) Response.Write(",");
	
    if (!isLast)
    {
        Response.Write(" ");
    }
    else
    {
        Response.WriteLine("");
    }
}


public void GenerateParamForInsert(ColumnSchemaCollection columns)
{
    ColumnSchemaCollection filteredColumns = columns;
	for (int i = 0; i < filteredColumns.Count; i++)
	{
        if(filteredColumns[i].IsPrimaryKeyMember == false )
        {
            if(i != filteredColumns.Count - 1)
            {
                Response.Write("$"+filteredColumns[i].Name.ToLower() +",");
            }
            else
            {
                Response.Write("$"+filteredColumns[i].Name.ToLower());
            }
        }
	}
}


public void GenerateValueForInsert(ColumnSchemaCollection columns)
{
    ColumnSchemaCollection filteredColumns = columns;
	for (int i = 0; i < filteredColumns.Count; i++)
	{
        if(filteredColumns[i].IsPrimaryKeyMember == false )
        {
            if(i != filteredColumns.Count - 1)
            {
                Response.Write("global_common::escape_mysql_string($"+filteredColumns[i].Name.ToLower() +"),");
            }
            else
            {
               Response.Write("global_common::escape_mysql_string($"+filteredColumns[i].Name.ToLower() +")");
            }
        }
	}
}

public void GenerateParamForUpdate(ColumnSchemaCollection columns)
{
    ColumnSchemaCollection filteredColumns = columns;
	for (int i = 0; i < filteredColumns.Count; i++)
	{   
        if(i != filteredColumns.Count - 1)
        {
            Response.Write("$"+filteredColumns[i].Name.ToLower() +",");
        }
        else
        {
            Response.Write("$"+filteredColumns[i].Name.ToLower());
        }       
	}
}


public void GenerateValueForUpdate(ColumnSchemaCollection columns)
{
    ColumnSchemaCollection filteredColumns = columns;
	for (int i = 0; i < filteredColumns.Count; i++)
	{        
        if(i != filteredColumns.Count - 1)
        {
            Response.Write("global_common::escape_mysql_string($"+filteredColumns[i].Name.ToLower() +"),");
        }
        else
        {
           Response.Write("global_common::escape_mysql_string($"+filteredColumns[i].Name.ToLower() +")");
        }       
	}
}

public static string GetPrimaryKey(ColumnSchemaCollection columns)
{
    ColumnSchemaCollection filteredColumns = columns;
	for (int i = 0; i < filteredColumns.Count; i++)
	{
        if(filteredColumns[i].IsPrimaryKeyMember )
        {           
            return filteredColumns[i].Name;
        }
	}
    return "";
}
public static string GetJSGlobalVariable(string name)
{
    return "_obj"+GetClassName(name);
}
#endregion

#region Procedure Naming

public string GetBySuffix(ColumnSchemaCollection columns)
{
    System.Text.StringBuilder bySuffix = new System.Text.StringBuilder();
	for (int i = 0; i < columns.Count; i++)
	{
	    if (i > 0) bySuffix.Append("And");
	    bySuffix.Append(columns[i].Name);
	}
	
	return bySuffix.ToString();
}
#endregion

#region Template Overrides
// Assign an appropriate file name to the output.
public override string GetFileName()
{
	if (this.SourceTable != null)
	{
		return this.SourceTable.Name + "_Procedures.sql";
	}
	else
	{
		return base.GetFileName();
	}
}

// Override the OutputFile property and assign our specific settings to it.
[Category("2. Options")]
[FileDialog(FileDialogType.Save, Title="Select Output File", Filter="Query Files (*.sql)|*.sql|All Files (*.*)|*.*", DefaultExtension=".sql")]
public override string OutputFile
{
	get {return base.OutputFile;}
	set {base.OutputFile = value;}
}

private void cn_InfoMessage(object sender, System.Data.SqlClient.SqlInfoMessageEventArgs e)
{
	Trace.WriteLine(e.Message);
}
#endregion 
</script>