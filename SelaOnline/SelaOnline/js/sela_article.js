/*
* This file was automatically generated By Code Smith 
* Modifications will be overwritten when code smith is run
*
* PLEASE DO NOT MAKE MODIFICATIONS TO THIS FILE
* Date Created 5/6/2012
*
*/



/// <summary>
/// Implementations of slarticles represent a Article
///
/// </summary>
function Article() {
    //region PRESERVE ExtraMethods For Article
    //endregion
    //region Contants	
    var ACT_ADD = 10;
    var ACT_UPDATE = 11;
    var ACT_DELETE = 12;
    var ACT_CHANGE_PAGE = 13;
    var ACT_SHOW_EDIT = 14;
    var ACT_GET = 15;
    var _strPage = "admin_article.php";

    //endregion   

    //region Public Functions

    this.btnSave_OnClick = btnSave_OnClick;
    function btnSave_OnClick() {
        core.disableControl("btnOK", true);
        var isValid = true;

        var prefix = core.trim(core.getObject("txtPrefix").val());
        core.ValidateInputTextBox('txtPrefix', '');
        if (prefix == '') {
            core.ValidateInputTextBox('txtPrefix', 'Prefix is required', isValid);
            isValid = false;
        } else if (prefix.length > 255) {
            core.ValidateInputTextBox('txtPrefix', 'Prefix must be less than 255', isValid);
            isValid = false;
        }

        var title = core.trim(core.getObject("txtTitle").val());
        core.ValidateInputTextBox('txtTitle', '');
        if (title == '') {
            core.ValidateInputTextBox('txtTitle', 'Title is required', isValid);
            isValid = false;
        } else if (title.length > 255) {
            core.ValidateInputTextBox('txtTitle', 'Title must be less than 255', isValid);
            isValid = false;
        }

        var fileName = core.trim(core.getObject("txtFileName").val());
        core.ValidateInputTextBox('txtFileName', '');
        if (fileName == '') {
            core.ValidateInputTextBox('txtFileName', 'FileName is required', isValid);
            isValid = false;
        } else if (fileName.length > 255) {
            core.ValidateInputTextBox('txtFileName', 'FileName must be less than 255', isValid);
            isValid = false;
        }

        var articleType = core.trim(core.getObject("txtArticleType").val());
        core.ValidateInputTextBox('txtArticleType', '');
        if (articleType == '') {
            core.ValidateInputTextBox('txtArticleType', 'ArticleType is required', isValid);
            isValid = false;
        } else if (articleType.length > 20) {
            core.ValidateInputTextBox('txtArticleType', 'ArticleType must be less than 20', isValid);
            isValid = false;
        }

        var notificationType = core.trim(core.getObject("txtNotificationType").val());
        core.ValidateInputTextBox('txtNotificationType', '');
        if (notificationType == '') {
            core.ValidateInputTextBox('txtNotificationType', 'NotificationType is required', isValid);
            isValid = false;
        } else if (notificationType.length > 20) {
            core.ValidateInputTextBox('txtNotificationType', 'NotificationType must be less than 20', isValid);
            isValid = false;
        }

        var catalogueID = core.trim(core.getObject("txtCatalogueID").val());
        core.ValidateInputTextBox('txtCatalogueID', '');
        if (catalogueID == '') {
            core.ValidateInputTextBox('txtCatalogueID', 'CatalogueID is required', isValid);
            isValid = false;
        } else if (catalogueID.length > 20) {
            core.ValidateInputTextBox('txtCatalogueID', 'CatalogueID must be less than 20', isValid);
            isValid = false;
        }

        var sectionID = core.trim(core.getObject("txtSectionID").val());
        core.ValidateInputTextBox('txtSectionID', '');
        if (sectionID == '') {
            core.ValidateInputTextBox('txtSectionID', 'SectionID is required', isValid);
            isValid = false;
        } else if (sectionID.length > 20) {
            core.ValidateInputTextBox('txtSectionID', 'SectionID must be less than 20', isValid);
            isValid = false;
        }

        var numView = core.trim(core.getObject("txtNumView").val());
        core.ValidateInputTextBox('txtNumView', '');
        if (numView == '') {
            core.ValidateInputTextBox('txtNumView', 'NumView is required', isValid);
            isValid = false;
        }
        var numComment = core.trim(core.getObject("txtNumComment").val());
        core.ValidateInputTextBox('txtNumComment', '');
        if (numComment == '') {
            core.ValidateInputTextBox('txtNumComment', 'NumComment is required', isValid);
            isValid = false;
        }
        var status = core.trim(core.getObject("txtStatus").val());
        core.ValidateInputTextBox('txtStatus', '');
        if (status == '') {
            core.ValidateInputTextBox('txtStatus', 'Status is required', isValid);
            isValid = false;
        } else if (status.length > 20) {
            core.ValidateInputTextBox('txtStatus', 'Status must be less than 20', isValid);
            isValid = false;
        }

        var tags = core.trim(core.getObject("txtTags").val());
        core.ValidateInputTextBox('txtTags', '');
        if (tags == '') {
            core.ValidateInputTextBox('txtTags', 'Tags is required', isValid);
            isValid = false;
        }
        var nicE = new nicEditors.findEditor('txtContent');
        var content = nicE.getContent();
        content = core.trim(core.stripHTML(content));
        core.ValidateInputTextBox('editor-txtContent div.nicEdit-main', '');
        if (content == '') {
            core.ValidateInputTextBox('editor-txtContent div.nicEdit-main', 'Content is required', isValid);
            isValid = false;
        }

        if (isValid == false) {
            core.disableControl("btnOK", false);
            return;
        }

        if (core.getObject("adddocmode")[0].value == ADD_MODE) {
            insertNew();
        }
        else {
            edit();
        }
    }

    this.edit = edit;
    function edit() {

        var prefix = core.trim(core.getObject("txtPrefix").val());
        var title = core.trim(core.getObject("txtTitle").val());
        var fileName = core.trim(core.getObject("txtFileName").val());
        var articleType = core.trim(core.getObject("txtArticleType").val());
        var content = core.trim(core.getObject("txtContent").val());
        var notificationType = core.trim(core.getObject("txtNotificationType").val());
        var tags = core.trim(core.getObject("txtTags").val());
        var catalogueID = core.trim(core.getObject("txtCatalogueID").val());
        var sectionID = core.trim(core.getObject("txtSectionID").val());
        var numView = core.trim(core.getObject("txtNumView").val());
        var numComment = core.trim(core.getObject("txtNumComment").val());
        var status = core.trim(core.getObject("txtStatus").val());

        strRequest = "?isAJ=1&act=" + ACT_UPDATE +
			'&Prefix=' + core.urlencode(prefix) +
			'&Title=' + core.urlencode(title) +
			'&FileName=' + core.urlencode(fileName) +
			'&ArticleType=' + core.urlencode(articleType) +
			'&Content=' + core.urlencode(content) +
			'&NotificationType=' + core.urlencode(notificationType) +
			'&Tags=' + core.urlencode(tags) +
			'&CatalogueID=' + core.urlencode(catalogueID) +
			'&SectionID=' + core.urlencode(sectionID) +
			'&NumView=' + core.urlencode(numView) +
			'&NumComment=' + core.urlencode(numComment) +
			'&Status=' + core.urlencode(status);

        var ajax = new Ajax();
        ajax.SendRequestToServerWithCustomMsg(_strPage, strRequest, edit_OnCallBack, true, MSG_AJAX_FETCHING_VN);
    }

    function edit_OnCallBack(xmlHTTPRequest) {
        core.disableControl("btnOK", false);
        if (xmlHTTPRequest.readyState == 4) {
            if (xmlHTTPRequest.status == 200) {
                var strRespond = core.parserXML(xmlHTTPRequest.responseText);
                if (!core.headerProcessingArr(strRespond[0], Array(true, true, false))) {
                    // ph?i kh?i t?o l?i d? tr?nh d?ng popdiv addFavourite
                    //var popDiv = new PopDiv();
                    //popDiv.init();
                    popDiv.alert(MSG_RES_OPERATION_FAIL, SYSTEM_TITLE_ERROR, 1);
                    return;
                }
                if (parseInt(strRespond[1]['rs']) == 1) {
                    showInfoBar('success', strRespond[1]["inf"]);
                    showAddMode();
                    changePage(_strPage, ACT_CHANGE_PAGE, core.getObject("txtPage").val());
                }
                else {
                    //var popDiv = new PopDiv();
                    //popDiv.init();
                    top.popDiv.childPop.alert(strRespond[1]["inf"], SYSTEM_TITLE_ERROR, 1);
                }
            }
        }
    }

    this.insertNew = insertNew;
    function insertNew() {
        var prefix = core.trim(core.getObject("txtPrefix").val());
        var title = core.trim(core.getObject("txtTitle").val());
        var fileName = core.trim(core.getObject("txtFileName").val());
        var articleType = core.trim(core.getObject("txtArticleType").val());
        var nicE = new nicEditors.findEditor('txtContent');
        var content = nicE.getContent();
        var notificationType = core.trim(core.getObject("txtNotificationType").val());
        var tags = core.trim(core.getObject("txtTags").val());
        var catalogueID = core.trim(core.getObject("txtCatalogueID").val());
        var sectionID = core.trim(core.getObject("txtSectionID").val());
        var numView = core.trim(core.getObject("txtNumView").val());
        var numComment = core.trim(core.getObject("txtNumComment").val());
        var status = core.trim(core.getObject("txtStatus").val());

        strRequest = "?isAJ=1&act=" + ACT_ADD +
			'&Prefix=' + core.urlencode(prefix) +
			'&Title=' + core.urlencode(title) +
			'&FileName=' + core.urlencode(fileName) +
			'&ArticleType=' + core.urlencode(articleType) +
			'&Content=' + core.urlencode(content) +
			'&NotificationType=' + core.urlencode(notificationType) +
			'&Tags=' + core.urlencode(tags) +
			'&CatalogueID=' + core.urlencode(catalogueID) +
			'&SectionID=' + core.urlencode(sectionID) +
			'&NumView=' + core.urlencode(numView) +
			'&NumComment=' + core.urlencode(numComment) +
			'&Status=' + core.urlencode(status);

        var ajax = new Ajax();
        ajax.SendRequestToServerWithCustomMsg(_strPage, strRequest, insertNew_OnCallBack, true, MSG_AJAX_FETCHING_VN);
    }

    function insertNew_OnCallBack(xmlHTTPRequest) {
        core.disableControl("btnOK", false);
        if (xmlHTTPRequest.readyState == 4) {
            if (xmlHTTPRequest.status == 200) {
                var strRespond = core.parserXML(xmlHTTPRequest.responseText);
                if (!core.headerProcessingArr(strRespond[0], Array(true, true, false))) {
                    // ph?i kh?i t?o l?i d? tr?nh d?ng popdiv addFavourite
                    //var popDiv = new PopDiv();
                    //popDiv.init();
                    popDiv.alert(MSG_RES_OPERATION_FAIL, SYSTEM_TITLE_ERROR, 1);
                    return;
                }
                if (parseInt(strRespond[1]['rs']) == 1) {
                    showInfoBar('success', strRespond[1]["inf"]);
                    showAddMode();
                    changePage(_strPage, ACT_CHANGE_PAGE, 1);
                }
                else {
                    //var popDiv = new PopDiv();
                    //popDiv.init();
                    top.popDiv.childPop.alert(strRespond[1]["inf"], SYSTEM_TITLE_ERROR, 1);
                }
            }
        }
    }

    var _cacheURL_pdoc;
    this.deleteObj = deleteObj;
    function deleteObj(id, name) {
        //curRow = currentRowId;
        popDiv.alert('Do you want to delete ' + name + ' ?', SYSTEM_TITLE_ERROR, 2, "_objArticle.delete_OK()", "_objArticle.delete_Cancel()");

        var keyword = '';
        if (typeof core.getObject("txtGet") != 'undefined') {
            keyword = core.getObject("txtGet").val();
        }

        _cacheURL_pdoc = _strPage + "?isAJ=1&act=" + ACT_DELETE + "&id=" + docid + "&p=" + core.getObject("txtPage")[0].value + "&kw=" + keyword;
    }
    this.delete_Cancel = delete_Cancel;
    function delete_Cancel() {
        //core.getObject("adddocmode")[0].value = ADD_MODE;
    }
    this.delete_OK = delete_OK;
    function delete_OK() {
        // Prepare AJAX to remove selected doc from favorite list
        var ajax = new Ajax(METHOD_GET);
        ajax.SendRequestToServerWithCustomMsg(_cacheURL_pdoc, null, delete_OnCallBack, true, MSG_AJAX_FETCHING_VN);
    }
    function delete_OnCallBack(xmlHTTPRequest) {

        if (xmlHTTPRequest.readyState == 4) {
            if (xmlHTTPRequest.status == 200) {
                var strRespond = core.parserXML(xmlHTTPRequest.responseText);

                if (!core.headerProcessingArr(strRespond[0], Array(true, true, false))) {
                    popDiv.alert(MSG_RES_OPERATION_FAIL, SYSTEM_TITLE_ERROR, 1);
                    return;
                }
                if (parseInt(strRespond[1]['rs']) == 1) {
                    parent.window.showInfoBar('success', strRespond[1]["inf"]);
                    core.getObject("txtPage")[0].value = strRespond[1]["p"];
                    popDiv.hide();
                    core.getObject("list-content")[0].innerHTML = strRespond[1]['list'];
                }
                else //if(parseInt(strRespond[3]) == -1)
                {
                    popDiv.alert(MSG_RES_OPERATION_FAIL, SYSTEM_TITLE_ERROR, 1);
                }
            }
        }
    }

    this.showEdit = showEdit;
    function showEdit(strID) {
        showAddMode();
        strRequest = "?isAJ=1&act=" + ACT_SHOW_EDIT + "&id=" + strID; ;
        var ajax = new Ajax(METHOD_GET);
        ajax.SendRequestToServerWithCustomMsg(_strPage + strRequest, null, showEdit_OnCallBack, true, MSG_AJAX_FETCHING_VN);

    }
    function showEdit_OnCallBack(xmlHTTPRequest) {

        if (xmlHTTPRequest.readyState == 4) {
            if (xmlHTTPRequest.status == 200) {
                var strRespond = core.parserXML(xmlHTTPRequest.responseText);
                if (!core.headerProcessingArr(strRespond[0], Array(true, true, false))) {
                    popDiv.alert(MSG_RES_OPERATION_FAIL, SYSTEM_TITLE_ERROR, 1);
                    return;
                }
                if (parseInt(strRespond[1]['rs']) == 1) {
                    showInfoBar('success', MSG_RES_OPERATION_SUCCESS);
                    //alert(strRespond[1]['sens']);
                    // Add Doc && clear field
                    core.getObject('txtPrefix').val(Prefix);
                    core.getObject('txtTitle').val(Title);
                    core.getObject('txtFileName').val(FileName);
                    core.getObject('txtArticleType').val(ArticleType);
                    core.getObject('txtContent').val(Content);
                    core.getObject('txtNotificationType').val(NotificationType);
                    core.getObject('txtTags').val(Tags);
                    core.getObject('txtCatalogueID').val(CatalogueID);
                    core.getObject('txtSectionID').val(SectionID);
                    core.getObject('txtNumView').val(NumView);
                    core.getObject('txtNumComment').val(NumComment);
                    core.getObject('txtStatus').val(Status);
                    core.getObject("adddocmode")[0].value = EDIT_MODE;
                    core.getObject("status-add")[0].innerHTML = 'Edit mode';
                }
                else  // Duplicate
                {
                    popDiv.alert(MSG_RES_OPERATION_FAIL, SYSTEM_TITLE_ERROR, 1);
                }
            }
        }
    }

    this.showAddMode = showAddMode;
    function showAddMode() {
        core.getObject("adddocmode")[0].value = ADD_MODE;
        core.getObject("status-add")[0].innerHTML = 'Add mode';
        core.getObject('txtPrefix').val('');
        core.getObject('txtTitle').val('');
        core.getObject('txtFileName').val('');
        core.getObject('txtArticleType').val('');
        core.getObject('txtContent').val('');
        core.getObject('txtNotificationType').val('');
        core.getObject('txtTags').val('');
        core.getObject('txtCatalogueID').val('');
        core.getObject('txtSectionID').val('');
        core.getObject('txtNumView').val('');
        core.getObject('txtNumComment').val('');
        core.getObject('txtStatus').val('');
    }

    /*
    *	Đổi trang
    */
    var p;
    this.changePage = changePage;
    function changePage(intPage) {
        var keyword = '';
        if (core.getObject("txtGet")) {
            keyword = core.getObject("txtGet").val();
        }
        var catID = "";
        if (core.getObject("catID")) {
            catID = core.getObject("catID").val();
        }
        
        var strRequest = "isAJ=1&act=" + ACT_CHANGE_PAGE + "&catid=" + catID + "&p=" + intPage + "&kw=" + keyword ;
        var ajax = new Ajax();
        p = intPage;
        ajax.SendRequestToServerWithCustomMsgCache('admin/'+_strPage+ '?uptime=' + core.getMilliseconds(), strRequest, changePage_OnCallBack, true, MSG_AJAX_SENDING_VN);
    }

    function changePage_OnCallBack(xmlHTTPRequest) {

        if (xmlHTTPRequest.readyState == 4) {
            if (xmlHTTPRequest.status == 200) {
                var strRespond = core.parserXML(xmlHTTPRequest.responseText);

                if (!core.headerProcessingArr(strRespond[0], Array(true, false, false))) {
                    //show fail
                    popDiv.alert(MSG_RES_OPERATION_FAIL, SYSTEM_TITLE_ERROR, 1);
                    return;
                }
                if (parseInt(strRespond[1]["rs"]) == 1) {
                    showInfoBar('success', "Thao tác thành công.");

                    // alert(strRespond[1]["inf"]);
                    core.getObject('list-content').html(strRespond[1]["inf"]);
                    core.getObject("txtPage")[0].value = p;
                }
            }
        }
    }
    //endregion   
}
var _objArticle = new Article();
