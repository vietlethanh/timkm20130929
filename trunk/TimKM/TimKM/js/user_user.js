/*
* This file was automatically generated By Code Smith 
* Modifications will be overwritten when code smith is run
*
* PLEASE DO NOT MAKE MODIFICATIONS TO THIS FILE
* Date Created 5/6/2012
*
*/



/// <summary>
/// Implementations of slusers represent a User
///
/// </summary>
var user = {
    //region PRESERVE ExtraMethods For User
    //endregion
    //region Contants	
    ACT_ADD : 				10,
    ACT_UPDATE : 			11,
    ACT_DELETE : 			12,
    ACT_CHANGE_PAGE : 		13,
    ACT_SHOW_EDIT : 		14,
    ACT_GET : 				15,
	ACT_LOGIN:				16,
	ACT_LOGOUT:				17,
	ACT_CHANGE_PASS:		18,
	ACT_REGISTER:			19,
	ACT_UPDATE_PROFILE:		20,
	ACT_RESET_PASS:			21,
	ACT_UPDATE_RESET_PASS:	22,
	ACT_CONTACT_US:	        23,
    Page : "bg_user.php",

    	
	login: function()
	{
		var controlSubmit = "btnOK";
		
		var message = core.util.getObjectByClass("help-inline.message");
		message.html('');
		core.util.disableControl(controlSubmit, true);
        var isValid = true;
        var controlID = 'txtUserName';	
		
        var userName = core.util.getObjectValueByID(controlID);
        core.util.validateInputTextBox(controlID, '');
        if (core.util.isNull(userName)) {
            core.util.validateInputTextBox(controlID, 'Tên đăng nhập không được rỗng', isValid);
            isValid = false;
        }		
		controlID = 'txtPassword';	
        var password = core.util.getObjectValueByID(controlID);
        core.util.validateInputTextBox(controlID, '');
        if (core.util.isNull(password)) {
            core.util.validateInputTextBox(controlID, 'Mật khẩu không được rỗng', isValid);
            isValid = false;
        } 
		
		
		 if (isValid == false) {
            core.util.disableControl(controlSubmit, false);
            return false;
        }
		return true;
	},
	
	getRegisterInfo: function() {
		var controlSubmit = "btnOK";
        core.util.disableControl(controlSubmit, true);
        var isValid = true;
        var controlID = 'txtUserName';		
        var userName = core.util.getObjectValueByID(controlID);
        core.util.validateInputTextBox(controlID, '');
        if (core.util.isNull(userName)) {
            core.util.validateInputTextBox(controlID, 'Tên đăng nhập không được rỗng', isValid);
            isValid = false;
        } else if (userName.length > 50) {
            core.util.validateInputTextBox(controlID, 'Tên đăng nhập phải ngắn hơn 255 ký tự', isValid);
            isValid = false;
        }
		
		controlID = 'txtPassword';	
        var password = core.util.getObjectValueByID(controlID);
        core.util.validateInputTextBox(controlID, '');
        if (core.util.isNull(password)) {
            core.util.validateInputTextBox(controlID, 'Mật khẩu không được rỗng', isValid);
            isValid = false;
        } 
		else if (password.length < 6 ) {
            core.util.validateInputTextBox(controlID, 'Mật khẩu phải tối thiều 6 ký tự', isValid);
            isValid = false;
        }
		else if (password.length > 255) {
            core.util.validateInputTextBox(controlID, 'Mật khẩu phải ngắn hơn 255 ký tự', isValid);
            isValid = false;
        }
		
		controlID = 'txtRepassword';	
		var txtRepassword = core.util.getObjectValueByID(controlID);
        core.util.validateInputTextBox(controlID, '');
		if (txtRepassword != password) {
            core.util.validateInputTextBox(controlID, 'Mật khẩu không trùng nhau', isValid);
            isValid = false;
        } 
		
		controlID = 'txtFullname';	
        var fullname = core.util.getObjectValueByID(controlID);
        core.util.validateInputTextBox(controlID, '');
        if (core.util.isNull(fullname)) {
            core.util.validateInputTextBox(controlID, 'Họ tên không được rỗng', isValid);
            isValid = false;
        } else if (fullname.length > 255) {
            core.util.validateInputTextBox(controlID, 'Họ tên phải ngắn hơn 255 ký tự', isValid);
            isValid = false;
        }

		controlID = 'txtBirthDate';	
        var birthDate = core.util.getObjectValueByID(controlID);
        core.util.validateInputTextBox(controlID, '');
		
		var validDate = new Date();
		validDate.setFullYear(validDate.getFullYear()-core.constant.AgeAbove);
		
        if (core.util.isNull(birthDate)) {
            core.util.validateInputTextBox(controlID, 'Ngày sinh không được rỗng', isValid);
            isValid = false;
        } else if (core.util.validateDateTime(birthDate) == false) {
			 core.util.validateInputTextBox(controlID, 'Ngày sinh không hợp lệ', isValid);
			 isValid = false;
        }
		else if (new Date(core.util.formatDateTimeVN(birthDate)) >= validDate ) {
			 core.util.validateInputTextBox(controlID, 'Ngày sinh không hợp lệ', isValid);
			 isValid = false;
        }
		
		controlID = 'txtEmail';	
        var email = core.util.getObjectValueByID(controlID);
        core.util.validateInputTextBox(controlID, '');
        if (core.util.isNull(email)) {
            core.util.validateInputTextBox(controlID, 'Email không được rỗng', isValid);
            isValid = false;
        }else if (email.length > 255) {
            core.util.validateInputTextBox(controlID, 'Email phải ngắn hơn 255 ký tự', isValid);
            isValid = false;
        }else if (!core.util.validateEmail(email)) {
            core.util.validateInputTextBox(controlID, 'Email không hợp lệ', isValid);
            isValid = false;
        }
				
		var sex ;
		if(core.util.isChecked("rdMale"))
		{
			sex = core.util.getObjectValueByID("rdMale");
		}
		else if(core.util.isChecked("rdFemale"))
		{
			sex = core.util.getObjectValueByID("rdFemale");
		}
        core.util.validateInputTextBox('rdMale', '');
        if (core.util.isNull(sex)) {
            core.util.validateInputTextBox('rdMale', 'Bạn chưa chọn giới tính', isValid);
            isValid = false;
        }
        
		 if(!core.util.isChecked("chkTerm")){		 
            core.util.validateInputTextBox('chkTerm', 'Bạn cần phải đồng ý điều khoản sử dụng', isValid);
            isValid = false;
        }
		
		 if (isValid == false) {
            core.util.disableControl(controlSubmit, false);
            return;
        }
		return {
			username:userName,
			password: password,
			fullname: fullname,
			email: email,
			sex: sex,
			birthdate: birthDate
	   }      
    },
	
    register: function() {  
		var regiserInfo = this.getRegisterInfo();
		if(core.util.isNull(regiserInfo))
		{
			return false;
		}
		regiserInfo.act = this.ACT_REGISTER;
        core.request.post(this.Page,regiserInfo,
            function(respone, info){
				 var strRespond = core.util.parserXML(respone);
				if (parseInt(strRespond[1]['rs']) == 1) {
					//core.ui.showInfoBar(2, "Đăng ký thành công. Vui lòng nhấn vào <a href='login.php'>đây</a> để đăng nhập");	
					//core.ui.showInfoBar(2, "Đăng ký thành công. Bạn có thể <a href='post_article.php'>đăng bài</a> ngay bây giờ");	
					core.ui.showInfoBar(2, "Đăng ký thành công.");	
					var rurl =  strRespond[1]['rurl'];
					if(core.util.isNull(rurl) == false)
					{
					    core.util.goTo(rurl);
					}
					else
					{
					    core.util.goTo("index.php");
					}
					//core.util.goTo("login.php");
                }
                else{
					//existed username
					if(parseInt(strRespond[1]['rs']) == 2)
					{
						 core.util.validateInputTextBox('txtUserName', strRespond[1]["inf"], true);
					}
					else if(parseInt(strRespond[1]['rs']) == 3)
					{
						 core.util.validateInputTextBox('txtEmail', strRespond[1]["inf"], true);
					}
                    core.ui.showInfoBar(2, strRespond[1]["inf"]);	
					core.util.disableControl("btnOK", false);
                }
            },
            function()
            {
				core.ui.showInfoBar(2, core.constant.MsgProcessError);	
				core.util.disableControl("btnOK", false);
            }
        );
    },
	
	getUpdateInfo: function() {
		var controlSubmit = "btnUpdateInfo";
        core.util.disableControl(controlSubmit, true);
        var isValid = true;
       		
		controlID = 'txtFullname';	
        var fullname = core.util.getObjectValueByID(controlID);
        core.util.validateInputTextBox(controlID, '');
        if (core.util.isNull(fullname)) {
            core.util.validateInputTextBox(controlID, 'Họ tên không được rỗng', isValid);
            isValid = false;
        } else if (fullname.length > 255) {
            core.util.validateInputTextBox(controlID, 'Họ tên phải ngắn hơn 255 ký tự', isValid);
            isValid = false;
        }

		controlID = 'txtBirthDate';	
        var birthDate = core.util.getObjectValueByID(controlID);
        core.util.validateInputTextBox(controlID, '');
		
		var validDate = new Date();
		validDate.setFullYear(validDate.getFullYear()- core.constant.AgeAbove);
		
        if (core.util.isNull(birthDate)) {
            core.util.validateInputTextBox(controlID, 'Ngày sinh không được rỗng', isValid);
            isValid = false;
        } else if (core.util.validateDateTime(birthDate) == false) {
			 core.util.validateInputTextBox(controlID, 'Ngày sinh không hợp lệ', isValid);
			 isValid = false;
        }
		else if (new Date(core.util.formatDateTimeVN(birthDate)) >= validDate ) {
			 core.util.validateInputTextBox(controlID, 'Ngày sinh không hợp lệ', isValid);
			 isValid = false;
        }
		
		controlID = 'txtEmail';	
        var email = core.util.getObjectValueByID(controlID);
        core.util.validateInputTextBox(controlID, '');
        if (core.util.isNull(email)) {
            core.util.validateInputTextBox(controlID, 'Email không được rỗng', isValid);
            isValid = false;
        } else if (email.length > 255) {
            core.util.validateInputTextBox(controlID, 'Email phải ngắn hơn 255 ký tự', isValid);
            isValid = false;
        }else if (!core.util.validateEmail(email)) {
            core.util.validateInputTextBox(controlID, 'Email không hợp lệ', isValid);
            isValid = false;
        }
				
		var sex ;
		if(core.util.isChecked("rdMale"))
		{
			sex = core.util.getObjectValueByID("rdMale");
		}
		else if(core.util.isChecked("rdFemale"))
		{
			sex = core.util.getObjectValueByID("rdFemale");
		}
         
		core.util.validateInputTextBox('rdMale', '');
        if (core.util.isNull(sex)) {
            core.util.validateInputTextBox('rdMale', 'Bạn chưa chọn giới tính', isValid);
            isValid = false;
        }
        
				
		if (isValid == false) {
            core.util.disableControl(controlSubmit, false);
            return;
        }
		return {			
			fullname: fullname,
			email: email,
			sex: sex,
			birthdate: birthDate,
			address: core.util.getObjectValueByID("txtAddress"),
			phone: core.util.getObjectValueByID("txtPhone"),
	   }      
    },
	
	
    updateProfile: function()
	{		
		var controlSubmit = "btnUpdateInfo";
		var userInfo = this.getUpdateInfo();
		if(core.util.isNull(userInfo))
		{
			return false;
		}
		
		userInfo.act = this.ACT_UPDATE_PROFILE;
        core.request.post(this.Page,userInfo,
            function(respone, info){
				 var strRespond = core.util.parserXML(respone);
				if (parseInt(strRespond[1]['rs']) == 1) {
					core.ui.showInfoBar(1, "Cập nhật thành công");	
					core.util.reload();
                }
                else{					
					if(parseInt(strRespond[1]['rs']) == 3)
					{
						 core.util.validateInputTextBox('txtEmail', strRespond[1]["inf"], true);
					}
                }
				core.util.disableControl(controlSubmit, false);
            },
            function()
            {
				core.ui.showInfoBar(2, core.constant.MsgProcessError);	
				core.util.disableControl(controlSubmit, false);
            }
        ); 
		
	},//updateProfile
	
	getPasswordInfo: function(controlSubmit) 
	{
        core.util.disableControl(controlSubmit, true);
        var isValid = true;
      
		
		controlID = 'txtCurrentPass';
        var currentPass = core.util.getObjectValueByID(controlID);
        core.util.validateInputTextBox(controlID, '');
        if (core.util.isNull(currentPass)) {
            core.util.validateInputTextBox(controlID, 'Mật khẩu hiện tại không được rỗng', isValid);
            isValid = false;
        } 
		
		controlID = 'txtNewPass';	
        var password = core.util.getObjectValueByID(controlID);
        core.util.validateInputTextBox(controlID, '');
        if (core.util.isNull(password)) {
            core.util.validateInputTextBox(controlID, 'Mật khẩu mới không được rỗng', isValid);
            isValid = false;
        } 
		else if (password.length < 6 ) {
            core.util.validateInputTextBox(controlID, 'Mật khẩu phải tối thiều 6 ký tự', isValid);
            isValid = false;
        }
		else if (password.length > 255) {
            core.util.validateInputTextBox(controlID, 'Mật khẩu phải ngắn hơn 255 ký tự', isValid);
            isValid = false;
        }
		
		controlID = 'txtConfirmPass';	
		var confirmPass = core.util.getObjectValueByID(controlID);
        core.util.validateInputTextBox(controlID, '');
		if (confirmPass != password) {
            core.util.validateInputTextBox(controlID, 'Mật khẩu mới không trùng nhau', isValid);
            isValid = false;
        } 
		
		
		if (isValid == false) {
            core.util.disableControl(controlSubmit, false);
            return;
        }
		return {			
			currentpass: currentPass,
			password: password,
			confirmpass: confirmPass
	   }      
    },
	
	changePassword: function()
	{		
		var controlSubmit = "btnChangePassword";
		var passwordInfo = this.getPasswordInfo(controlSubmit);
		if(core.util.isNull(passwordInfo))
		{
			return false;
		}
		
		passwordInfo.act = this.ACT_CHANGE_PASS;
        core.request.post(this.Page,passwordInfo,
            function(respone, info){
				var strRespond = core.util.parserXML(respone);
				if (parseInt(strRespond[1]['rs']) == 1) {
					core.ui.showInfoBar(1, "Cập nhật thành công");	
					core.util.clearValue("txtNewPass");
					core.util.clearValue("txtConfirmPass");
					core.util.clearValue("txtCurrentPass");
                }
                else{
					if(parseInt(strRespond[1]['rs']) == 2)
					{
						 core.util.validateInputTextBox('txtNewPass', strRespond[1]["inf"], true);
					}
					
					core.ui.showInfoBar(2,strRespond[1]["inf"]);	
                }
				core.util.disableControl(controlSubmit, false);
            },
            function()
            {
				core.ui.showInfoBar(2, core.constant.MsgProcessError);	
				core.util.disableControl(controlSubmit, false);
            }
        ); 
		
	},//changepassword
	
	getUpdateResetPasswordInfo: function(controlSubmit) 
	{
        core.util.disableControl(controlSubmit, true);
        var isValid = true;
      	
		controlID = 'txtNewPass';	
        var password = core.util.getObjectValueByID(controlID);
        core.util.validateInputTextBox(controlID, '');
        if (core.util.isNull(password)) {
            core.util.validateInputTextBox(controlID, 'Mật khẩu mới không được rỗng', isValid);
            isValid = false;
        } 
		else if (password.length < 6 ) {
            core.util.validateInputTextBox(controlID, 'Mật khẩu phải tối thiều 6 ký tự', isValid);
            isValid = false;
        }
		else if (password.length > 255) {
            core.util.validateInputTextBox(controlID, 'Mật khẩu phải ngắn hơn 255 ký tự', isValid);
            isValid = false;
        }
		
		controlID = 'txtConfirmPass';	
		var confirmPass = core.util.getObjectValueByID(controlID);
        core.util.validateInputTextBox(controlID, '');
		if (confirmPass != password) {
            core.util.validateInputTextBox(controlID, 'Mật khẩu mới không trùng nhau', isValid);
            isValid = false;
        } 
		
		
		if (isValid == false) {
            core.util.disableControl(controlSubmit, false);
            return;
        }
		return {			
			resetid: core.util.getObjectValueByID("reset-id"),
			password: password,
			confirmpass: confirmPass
	   }      
    },
	
	updateResetPassword: function()
	{		
		var controlSubmit = "btnChangePassword";
		var passwordInfo = this.getUpdateResetPasswordInfo(controlSubmit);
		if(core.util.isNull(passwordInfo))
		{
			return false;
		}
		
		passwordInfo.act = this.ACT_UPDATE_RESET_PASS;
        core.request.post(this.Page,passwordInfo,
            function(respone, info){
				var strRespond = core.util.parserXML(respone);
				if (parseInt(strRespond[1]['rs']) == 1) {
					core.ui.showInfoBar(1, "Cập nhật thành công");	
					core.util.clearValue("txtNewPass");
					core.util.clearValue("txtConfirmPass");
                }
                else{
					if(parseInt(strRespond[1]['rs']) == 2)
					{
						 core.util.validateInputTextBox('txtNewPass', strRespond[1]["inf"], true);
					}
					
					core.ui.showInfoBar(2,strRespond[1]["inf"]);	
                }
				core.util.disableControl(controlSubmit, false);
            },
            function()
            {
				core.ui.showInfoBar(2, core.constant.MsgProcessError);	
				core.util.disableControl(controlSubmit, false);
            }
        ); 
		
	},//changepassword
	
	getResetInfo: function(controlSubmit) 
	{
        core.util.disableControl(controlSubmit, true);
        var isValid = true;
      
		
		userNameID = 'txtUserName';
        var userName = core.util.getObjectValueByID(userNameID);
		
		emailID = 'txtEmail';	
        var email = core.util.getObjectValueByID(emailID);
		core.util.validateInputTextBox(userNameID, '');
		core.util.validateInputTextBox(emailID, '');
		if(core.util.isNull(userName) && core.util.isNull(email))
		{
			if (core.util.isNull(userName)) {
				core.util.validateInputTextBox(userNameID, 'Hãy nhập tên đăng nhập hoặc email', isValid);
				isValid = false;
			} 
		}
		else if(!core.util.isNull(email))
		{			
			if (!core.util.validateEmail(email)) {
				core.util.validateInputTextBox(emailID, 'Email không hợp lệ', isValid);
				isValid = false;
			}
		}
		
		if (isValid == false) {
            core.util.disableControl(controlSubmit, false);
            return;
        }
		return {			
			username: userName,
			email: email			
	   }      
    },
	
	resetPassword: function()
	{		
		var controlSubmit = "btnOK";
		var resetInfo = this.getResetInfo(controlSubmit);
		if(core.util.isNull(resetInfo))
		{
			return false;
		}
		
		resetInfo.act = this.ACT_RESET_PASS;
        core.request.post(this.Page,resetInfo,
            function(respone, info){
				var strRespond = core.util.parserXML(respone);
				if (parseInt(strRespond[1]['rs']) == 1) {
					core.ui.showInfoBar(2, strRespond[1]["inf"]);	
                }
                else{					
					core.ui.showInfoBar(2,strRespond[1]["inf"]);	
                }
				core.util.disableControl(controlSubmit, false);
            },
            function()
            {
				core.ui.showInfoBar(2, core.constant.MsgProcessError);	
				core.util.disableControl(controlSubmit, false);
            }
        ); 
		
	},//reset password
	
	
	getContactUsInfo: function(controlSubmit) 
	{
        core.util.disableControl(controlSubmit, true);
        var isValid = true;
      
		
		controlID = 'txtFullName';
        var fullName = core.util.getObjectValueByID(controlID);
        core.util.validateInputTextBox(controlID, '');
        if (core.util.isNull(fullName)) {
            core.util.validateInputTextBox(controlID, 'Họ tên không được rỗng', isValid);
            isValid = false;
        } 
        
		controlID = 'txtEmail';	
        var email = core.util.getObjectValueByID(controlID);
		core.util.validateInputTextBox(controlID, '');
		if(core.util.isNull(email))
		{
			core.util.validateInputTextBox(controlID, 'Email không được rỗng', isValid);
			isValid = false;
		}
		else
		{			
			if (!core.util.validateEmail(email)) {
				core.util.validateInputTextBox(controlID, 'Email không hợp lệ', isValid);
				isValid = false;
			}
		}
		
		controlID = 'txtSubject';
        var subject = core.util.getObjectValueByID(controlID);
        core.util.validateInputTextBox(controlID, '');
        if (core.util.isNull(subject)) {
            core.util.validateInputTextBox(controlID, 'Tiêu không được rỗng', isValid);
            isValid = false;
        } 
        
		controlID = 'txtContent';
        var content = core.util.getObjectValueByID(controlID);
        core.util.validateInputTextBox(controlID, '');
        if (core.util.isNull(content)) {
            core.util.validateInputTextBox(controlID, 'Tiêu không được rỗng', isValid);
            isValid = false;
        } 
        
		if (isValid == false) {
            core.util.disableControl(controlSubmit, false);
            return;
        }
		return {			
			fullName: fullName,
			email: email,
			subject: subject,
			content: content		
	   }      
    },
	sendContactUs: function()
	{		
		var controlSubmit = "btnOK";
		var contactInfo = this.getContactUsInfo(controlSubmit);
		if(core.util.isNull(contactInfo))
		{
			return false;
		}
		
		contactInfo.act = this.ACT_CONTACT_US;
        core.request.post(this.Page,contactInfo,
            function(respone, info){
				var strRespond = core.util.parserXML(respone);
				if (parseInt(strRespond[1]['rs']) == 1) {
					core.ui.showInfoBar(1, strRespond[1]["inf"]);	
					core.util.clearValue("txtFullName");
					core.util.clearValue("txtEmail");
					core.util.clearValue("txtSubject");
					core.util.clearValue("txtContent");
                }
                else{					
					core.ui.showInfoBar(2,strRespond[1]["inf"]);	
                }
				core.util.disableControl(controlSubmit, false);
            },
            function()
            {
				core.ui.showInfoBar(2, core.constant.MsgProcessError);	
				core.util.disableControl(controlSubmit, false);
            }
        ); 
		
	},//sendContactUs
	
    logout: function()
	{		
		var data ={act:this.ACT_LOGOUT}
        core.request.post(this.Page,data,
            function(respone, info){
				 var strRespond = core.util.parserXML(respone);
				if (parseInt(strRespond[1]['rs']) == 1) {
					var rurl =  strRespond[1]['rurl'];
					if(core.util.isNull(rurl) == false)
					{
					    core.util.goTo(rurl);
					}
					else
					{
					    core.util.goTo("index.php");
					}					
                }
                else{					
                    core.ui.showInfoBar(2, strRespond[1]["inf"]);						
                }
            },
            function()
            {
				core.ui.showInfoBar(2, core.constant.MsgProcessError);					
            }
        );//logout
	},
	 validateCreateUser: function() {
        core.disableControl("btnOK", true);
        var isValid = true;

        var userID = core.util.getObjectValueByID("txtUserID");
        core.util.validateInputTextBox('txtUserID', '');
        if (userID == '') {
            core.util.validateInputTextBox('txtUserID', 'UserID is required', isValid);
            isValid = false;
        } else if (userID.length > 20) {
            core.util.validateInputTextBox('txtUserID', 'UserID must be less than 20', isValid);
            isValid = false;
        }

        var userName = core.util.getObjectValueByID("txtUserName");
        core.util.validateInputTextBox('txtUserName', '');
        if (userName == '') {
            core.util.validateInputTextBox('txtUserName', 'UserName is required', isValid);
            isValid = false;
        } else if (userName.length > 50) {
            core.util.validateInputTextBox('txtUserName', 'UserName must be less than 50', isValid);
            isValid = false;
        }

        var password = core.util.getObjectValueByID("txtPassword");
        core.util.validateInputTextBox('txtPassword', '');
        if (password == '') {
            core.util.validateInputTextBox('txtPassword', 'Password is required', isValid);
            isValid = false;
        } else if (password.length > 255) {
            core.util.validateInputTextBox('txtPassword', 'Password must be less than 255', isValid);
            isValid = false;
        }

        var fullname = core.util.getObjectValueByID("txtFullname");
        core.util.validateInputTextBox('txtFullname', '');
        if (fullname == '') {
            core.util.validateInputTextBox('txtFullname', 'Fullname is required', isValid);
            isValid = false;
        } else if (fullname.length > 255) {
            core.util.validateInputTextBox('txtFullname', 'Fullname must be less than 255', isValid);
            isValid = false;
        }

        var birthDate = core.util.getObjectValueByID("txtBirthDate");
        core.util.validateInputTextBox('txtBirthDate', '');
        if (birthDate == '') {
            core.util.validateInputTextBox('txtBirthDate', 'BirthDate is required', isValid);
            isValid = false;
        } else if (core.ValidateDateTime(birthDate) == false) {
            core.getObject('txtBirthDate')[0].focus();
            strError += '<p>BirthDate is invalid!</p>';
        }

        var address = core.util.getObjectValueByID("txtAddress");
        core.util.validateInputTextBox('txtAddress', '');
        if (address == '') {
            core.util.validateInputTextBox('txtAddress', 'Address is required', isValid);
            isValid = false;
        } else if (address.length > 255) {
            core.util.validateInputTextBox('txtAddress', 'Address must be less than 255', isValid);
            isValid = false;
        }

        var phone = core.util.getObjectValueByID("txtPhone");
        core.util.validateInputTextBox('txtPhone', '');
        if (phone == '') {
            core.util.validateInputTextBox('txtPhone', 'Phone is required', isValid);
            isValid = false;
        } else if (phone.length > 20) {
            core.util.validateInputTextBox('txtPhone', 'Phone must be less than 20', isValid);
            isValid = false;
        }

        var email = core.util.getObjectValueByID("txtEmail");
        core.util.validateInputTextBox('txtEmail', '');
        if (email == '') {
            core.util.validateInputTextBox('txtEmail', 'Email is required', isValid);
            isValid = false;
        } else if (email.length > 255) {
            core.util.validateInputTextBox('txtEmail', 'Email must be less than 255', isValid);
            isValid = false;
        }

        var sex = core.util.getObjectValueByID("txtSex");
        core.util.validateInputTextBox('txtSex', '');
        if (sex == '') {
            core.util.validateInputTextBox('txtSex', 'Sex is required', isValid);
            isValid = false;
        }
        var identity = core.util.getObjectValueByID("txtIdentity");
        core.util.validateInputTextBox('txtIdentity', '');
        if (identity == '') {
            core.util.validateInputTextBox('txtIdentity', 'Identity is required', isValid);
            isValid = false;
        } else if (identity.length > 20) {
            core.util.validateInputTextBox('txtIdentity', 'Identity must be less than 20', isValid);
            isValid = false;
        }

        var roleID = core.util.getObjectValueByID("txtRoleID");
        core.util.validateInputTextBox('txtRoleID', '');
        if (roleID == '') {
            core.util.validateInputTextBox('txtRoleID', 'RoleID is required', isValid);
            isValid = false;
        } else if (roleID.length > 20) {
            core.util.validateInputTextBox('txtRoleID', 'RoleID must be less than 20', isValid);
            isValid = false;
        }

        var userRankID = core.util.getObjectValueByID("txtUserRankID");
        core.util.validateInputTextBox('txtUserRankID', '');
        if (userRankID == '') {
            core.util.validateInputTextBox('txtUserRankID', 'UserRankID is required', isValid);
            isValid = false;
        } else if (userRankID.length > 20) {
            core.util.validateInputTextBox('txtUserRankID', 'UserRankID must be less than 20', isValid);
            isValid = false;
        }

        var avatar = core.util.getObjectValueByID("txtAvatar");
        core.util.validateInputTextBox('txtAvatar', '');
        if (avatar == '') {
            core.util.validateInputTextBox('txtAvatar', 'Avatar is required', isValid);
            isValid = false;
        } else if (avatar.length > 255) {
            core.util.validateInputTextBox('txtAvatar', 'Avatar must be less than 255', isValid);
            isValid = false;
        }

        var accountID = core.util.getObjectValueByID("txtAccountID");
        core.util.validateInputTextBox('txtAccountID', '');
        if (accountID == '') {
            core.util.validateInputTextBox('txtAccountID', 'AccountID is required', isValid);
            isValid = false;
        } else if (accountID.length > 255) {
            core.util.validateInputTextBox('txtAccountID', 'AccountID must be less than 255', isValid);
            isValid = false;
        }

        var isActived = core.util.getObjectValueByID("txtIsActived");
        core.util.validateInputTextBox('txtIsActived', '');
        if (isActived == '') {
            core.util.validateInputTextBox('txtIsActived', 'IsActived is required', isValid);
            isValid = false;
        }

        if (isValid == false) {
            core.disableControl("btnOK", false);
            return;
        }

        if (core.getObject("adddocmode")[0].value == ADD_MODE) {
            insertNew();
        }
        else {
            edit();
        }
    },
	
    //endregion   

    //region Public Functions
    /*
    this.btnSave_OnClick = btnSave_OnClick;
    function btnSave_OnClick() {
    core.disableControl("btnOK", true);
    var isValid = true;

        var userID = core.util.getObjectValueByID("txtUserID");  
    core.util.validateInputTextBox('txtUserID','');
    if(userID == ''){
    core.util.validateInputTextBox('txtUserID','UserID is required', isValid);
    isValid =  false;
    }else if (userID.length > 20) {
    core.util.validateInputTextBox('txtUserID','UserID must be less than 20', isValid);
    isValid =  false;
    }

		var userName = core.util.getObjectValueByID("txtUserName");
    core.util.validateInputTextBox('txtUserName','');
    if(userName == ''){
    core.util.validateInputTextBox('txtUserName','UserName is required', isValid);
    isValid =  false;
    }else if (userName.length > 50) {
    core.util.validateInputTextBox('txtUserName','UserName must be less than 50', isValid);
    isValid =  false;
    }

		var password = core.util.getObjectValueByID("txtPassword");
    core.util.validateInputTextBox('txtPassword','');
    if(password == ''){
    core.util.validateInputTextBox('txtPassword','Password is required', isValid);
    isValid =  false;
    }else if (password.length > 255) {
    core.util.validateInputTextBox('txtPassword','Password must be less than 255', isValid);
    isValid =  false;
    }

		var fullname = core.util.getObjectValueByID("txtFullname");
    core.util.validateInputTextBox('txtFullname','');
    if(fullname == ''){
    core.util.validateInputTextBox('txtFullname','Fullname is required', isValid);
    isValid =  false;
    }else if (fullname.length > 255) {
    core.util.validateInputTextBox('txtFullname','Fullname must be less than 255', isValid);
    isValid =  false;
    }

		var birthDate = core.util.getObjectValueByID("txtBirthDate");
    core.util.validateInputTextBox('txtBirthDate','');
    if(birthDate == ''){
    core.util.validateInputTextBox('txtBirthDate','BirthDate is required', isValid);
    isValid =  false;
    }else if (core.ValidateDateTime(birthDate) == false) {
    core.getObject('txtBirthDate')[0].focus();
    strError += '<p>BirthDate is invalid!</p>';
    }

		var address = core.util.getObjectValueByID("txtAddress");
    core.util.validateInputTextBox('txtAddress','');
    if(address == ''){
    core.util.validateInputTextBox('txtAddress','Address is required', isValid);
    isValid =  false;
    }else if (address.length > 255) {
    core.util.validateInputTextBox('txtAddress','Address must be less than 255', isValid);
    isValid =  false;
    }

		var phone = core.util.getObjectValueByID("txtPhone");
    core.util.validateInputTextBox('txtPhone','');
    if(phone == ''){
    core.util.validateInputTextBox('txtPhone','Phone is required', isValid);
    isValid =  false;
    }else if (phone.length > 20) {
    core.util.validateInputTextBox('txtPhone','Phone must be less than 20', isValid);
    isValid =  false;
    }

		var email = core.util.getObjectValueByID("txtEmail");
    core.util.validateInputTextBox('txtEmail','');
    if(email == ''){
    core.util.validateInputTextBox('txtEmail','Email is required', isValid);
    isValid =  false;
    }else if (email.length > 255) {
    core.util.validateInputTextBox('txtEmail','Email must be less than 255', isValid);
    isValid =  false;
    }

		var sex = core.util.getObjectValueByID("txtSex");
    core.util.validateInputTextBox('txtSex','');
    if(sex == ''){
    core.util.validateInputTextBox('txtSex','Sex is required', isValid);
    isValid =  false;
    }
    var identity = core.util.getObjectValueByID("txtIdentity");
    core.util.validateInputTextBox('txtIdentity','');
    if(identity == ''){
    core.util.validateInputTextBox('txtIdentity','Identity is required', isValid);
    isValid =  false;
    }else if (identity.length > 20) {
    core.util.validateInputTextBox('txtIdentity','Identity must be less than 20', isValid);
    isValid =  false;
    }

		var roleID = core.util.getObjectValueByID("txtRoleID");
    core.util.validateInputTextBox('txtRoleID','');
    if(roleID == ''){
    core.util.validateInputTextBox('txtRoleID','RoleID is required', isValid);
    isValid =  false;
    }else if (roleID.length > 20) {
    core.util.validateInputTextBox('txtRoleID','RoleID must be less than 20', isValid);
    isValid =  false;
    }

		var userRankID = core.util.getObjectValueByID("txtUserRankID");
    core.util.validateInputTextBox('txtUserRankID','');
    if(userRankID == ''){
    core.util.validateInputTextBox('txtUserRankID','UserRankID is required', isValid);
    isValid =  false;
    }else if (userRankID.length > 20) {
    core.util.validateInputTextBox('txtUserRankID','UserRankID must be less than 20', isValid);
    isValid =  false;
    }

		var avatar = core.util.getObjectValueByID("txtAvatar");
    core.util.validateInputTextBox('txtAvatar','');
    if(avatar == ''){
    core.util.validateInputTextBox('txtAvatar','Avatar is required', isValid);
    isValid =  false;
    }else if (avatar.length > 255) {
    core.util.validateInputTextBox('txtAvatar','Avatar must be less than 255', isValid);
    isValid =  false;
    }

		var accountID = core.util.getObjectValueByID("txtAccountID");
    core.util.validateInputTextBox('txtAccountID','');
    if(accountID == ''){
    core.util.validateInputTextBox('txtAccountID','AccountID is required', isValid);
    isValid =  false;
    }else if (accountID.length > 255) {
    core.util.validateInputTextBox('txtAccountID','AccountID must be less than 255', isValid);
    isValid =  false;
    }

		var isActived = core.util.getObjectValueByID("txtIsActived");
    core.util.validateInputTextBox('txtIsActived','');
    if(isActived == ''){
    core.util.validateInputTextBox('txtIsActived','IsActived is required', isValid);
    isValid =  false;
    }
	       
    if (isValid == false) {
    core.disableControl("btnOK", false);
    return;
    }
         
    if (core.getObject("adddocmode")[0].value == ADD_MODE) {
    insertNew();
    }
    else {
    edit();
    }
    }
    
    this.edit = edit;
    function edit() {

		var userID = core.util.getObjectValueByID("txtUserID");
    var userName = core.util.getObjectValueByID("txtUserName");
    var password = core.util.getObjectValueByID("txtPassword");
    var fullname = core.util.getObjectValueByID("txtFullname");
    var birthDate = core.util.getObjectValueByID("txtBirthDate");
    var address = core.util.getObjectValueByID("txtAddress");
    var phone = core.util.getObjectValueByID("txtPhone");
    var email = core.util.getObjectValueByID("txtEmail");
    var sex = core.util.getObjectValueByID("txtSex");
    var identity = core.util.getObjectValueByID("txtIdentity");
    var roleID = core.util.getObjectValueByID("txtRoleID");
    var userRankID = core.util.getObjectValueByID("txtUserRankID");
    var avatar = core.util.getObjectValueByID("txtAvatar");
    var accountID = core.util.getObjectValueByID("txtAccountID");
    var isActived = core.util.getObjectValueByID("txtIsActived");
	                
    strRequest = "?isAJ=1&act=" + ACT_UPDATE +  
    '&UserID='+ core.urlencode(userID)+
    '&UserName='+ core.urlencode(userName)+
    '&Password='+ core.urlencode(password)+
    '&Fullname='+ core.urlencode(fullname)+
    '&BirthDate='+ core.urlencode(birthDate)+
    '&Address='+ core.urlencode(address)+
    '&Phone='+ core.urlencode(phone)+
    '&Email='+ core.urlencode(email)+
    '&Sex='+ core.urlencode(sex)+
    '&Identity='+ core.urlencode(identity)+
    '&RoleID='+ core.urlencode(roleID)+
    '&UserRankID='+ core.urlencode(userRankID)+
    '&Avatar='+ core.urlencode(avatar)+
    '&AccountID='+ core.urlencode(accountID)+
    '&IsActived='+ core.urlencode(isActived)		;
        
    var ajax = new Ajax();
    ajax.SendRequestToServerWithCustomMsg(_strPage, strRequest, edit_OnCallBack, true, MSG_AJAX_FETCHING_VN);
    }

    function edit_OnCallBack(xmlHTTPRequest) {
    core.disableControl("btnOK", false);
    if (xmlHTTPRequest.readyState == 4) {
    if (xmlHTTPRequest.status == 200) {
    var strRespond = core.parserXML(xmlHTTPRequest.responseText);
    if (!core.headerProcessingArr(strRespond[0], Array(true, true, false))) {
    // ph?i kh?i t?o l?i d? tr?nh d?ng popdiv addFavourite
    //var popDiv = new PopDiv();
    //popDiv.init();
    popDiv.alert(MSG_RES_OPERATION_FAIL, SYSTEM_TITLE_ERROR, 1);
    return;
    }
    if (parseInt(strRespond[1]['rs']) == 1) {
    showInfoBar('success', strRespond[1]["inf"]);
    showAddMode();
    changePage(_strPage, ACT_CHANGE_PAGE, core.getObject("txtPage");
    }
    else {
    //var popDiv = new PopDiv();
    //popDiv.init();
    top.popDiv.childPop.alert(strRespond[1]["inf"], SYSTEM_TITLE_ERROR, 1);
    }
    }
    }
    }
    
    this.insertNew = insertNew;
    function insertNew() {

		var userID = core.util.getObjectValueByID("txtUserID");
    var userName = core.util.getObjectValueByID("txtUserName");
    var password = core.util.getObjectValueByID("txtPassword");
    var fullname = core.util.getObjectValueByID("txtFullname");
    var birthDate = core.util.getObjectValueByID("txtBirthDate");
    var address = core.util.getObjectValueByID("txtAddress");
    var phone = core.util.getObjectValueByID("txtPhone");
    var email = core.util.getObjectValueByID("txtEmail");
    var sex = core.util.getObjectValueByID("txtSex");
    var identity = core.util.getObjectValueByID("txtIdentity");
    var roleID = core.util.getObjectValueByID("txtRoleID");
    var userRankID = core.util.getObjectValueByID("txtUserRankID");
    var avatar = core.util.getObjectValueByID("txtAvatar");
    var accountID = core.util.getObjectValueByID("txtAccountID");
    var isActived = core.util.getObjectValueByID("txtIsActived");
	        
    strRequest = "?isAJ=1&act=" + ACT_ADD +  
    '&UserID='+ core.urlencode(userID)+
    '&UserName='+ core.urlencode(userName)+
    '&Password='+ core.urlencode(password)+
    '&Fullname='+ core.urlencode(fullname)+
    '&BirthDate='+ core.urlencode(birthDate)+
    '&Address='+ core.urlencode(address)+
    '&Phone='+ core.urlencode(phone)+
    '&Email='+ core.urlencode(email)+
    '&Sex='+ core.urlencode(sex)+
    '&Identity='+ core.urlencode(identity)+
    '&RoleID='+ core.urlencode(roleID)+
    '&UserRankID='+ core.urlencode(userRankID)+
    '&Avatar='+ core.urlencode(avatar)+
    '&AccountID='+ core.urlencode(accountID)+
    '&IsActived='+ core.urlencode(isActived)		;
        
    var ajax = new Ajax();
    ajax.SendRequestToServerWithCustomMsg(_strPage, strRequest, insertNew_OnCallBack, true, MSG_AJAX_FETCHING_VN);
    }

    function insertNew_OnCallBack(xmlHTTPRequest) {
    core.disableControl("btnOK", false);
    if (xmlHTTPRequest.readyState == 4) {
    if (xmlHTTPRequest.status == 200) {
    var strRespond = core.parserXML(xmlHTTPRequest.responseText);
    if (!core.headerProcessingArr(strRespond[0], Array(true, true, false))) {
    // ph?i kh?i t?o l?i d? tr?nh d?ng popdiv addFavourite
    //var popDiv = new PopDiv();
    //popDiv.init();
    popDiv.alert(MSG_RES_OPERATION_FAIL, SYSTEM_TITLE_ERROR, 1);
    return;
    }
    if (parseInt(strRespond[1]['rs']) == 1) {
    showInfoBar('success', strRespond[1]["inf"]);
    showAddMode();
    changePage(_strPage, ACT_CHANGE_PAGE, 1);
    }
    else {
    //var popDiv = new PopDiv();
    //popDiv.init();
    top.popDiv.childPop.alert(strRespond[1]["inf"], SYSTEM_TITLE_ERROR, 1);
    }
    }
    }
    }
    
    var _cacheURL_pdoc;
    this.deleteObj = deleteObj;
    function deleteObj(id, name) {
    //curRow = currentRowId;
    popDiv.alert('Do you want to delete ' + name + ' ?', SYSTEM_TITLE_ERROR, 2, "_objUser.delete_OK()", "_objUser.delete_Cancel()");

        var keyword = '';
    if (typeof core.getObject("txtGet") != 'undefined') {
    keyword = core.getObject("txtGet").val();
    }
      
    _cacheURL_pdoc = _strPage + "?isAJ=1&act=" + ACT_DELETE + "&id=" + docid + "&p=" + core.getObject("txtPage")[0].value + "&kw=" + keyword;
    }
    this.delete_Cancel = delete_Cancel;
    function delete_Cancel() {
    //core.getObject("adddocmode")[0].value = ADD_MODE;
    }
    this.delete_OK = delete_OK;
    function delete_OK() {
    // Prepare AJAX to remove selected doc from favorite list
    var ajax = new Ajax(METHOD_GET);
    ajax.SendRequestToServerWithCustomMsg(_cacheURL_pdoc, null, delete_OnCallBack, true, MSG_AJAX_FETCHING_VN);
    }
    function delete_OnCallBack(xmlHTTPRequest) {

        if (xmlHTTPRequest.readyState == 4) {
    if (xmlHTTPRequest.status == 200) {
    var strRespond = core.parserXML(xmlHTTPRequest.responseText);

                if (!core.headerProcessingArr(strRespond[0], Array(true, true, false))) {
    popDiv.alert(MSG_RES_OPERATION_FAIL, SYSTEM_TITLE_ERROR, 1);
    return;
    }
    if (parseInt(strRespond[1]['rs']) == 1) {
    parent.window.showInfoBar('success', strRespond[1]["inf"]);
    core.getObject("txtPage")[0].value = strRespond[1]["p"];
    popDiv.hide();
    core.getObject("list-content")[0].innerHTML = strRespond[1]['list'];
    }
    else //if(parseInt(strRespond[3]) == -1)
    {
    popDiv.alert(MSG_RES_OPERATION_FAIL, SYSTEM_TITLE_ERROR, 1);
    }
    }
    }
    }
    
    this.showEdit = showEdit;
    function showEdit(strID) {
    showAddMode();
    strRequest = "?isAJ=1&act=" + ACT_SHOW_EDIT + "&id=" + strID; ;
    var ajax = new Ajax(METHOD_GET);
    ajax.SendRequestToServerWithCustomMsg(_strPage + strRequest, null, showEdit_OnCallBack, true, MSG_AJAX_FETCHING_VN);

    }
    function showEdit_OnCallBack(xmlHTTPRequest) {

        if (xmlHTTPRequest.readyState == 4) {
    if (xmlHTTPRequest.status == 200) {
    var strRespond = core.parserXML(xmlHTTPRequest.responseText);
    if (!core.headerProcessingArr(strRespond[0], Array(true, true, false))) {
    popDiv.alert(MSG_RES_OPERATION_FAIL, SYSTEM_TITLE_ERROR, 1);
    return;
    }
    if (parseInt(strRespond[1]['rs']) == 1) {
    showInfoBar('success', MSG_RES_OPERATION_SUCCESS);
    //alert(strRespond[1]['sens']);
    // Add Doc && clear field
    core.getObject('txtUserID').val(UserID);
    core.getObject('txtUserName').val(UserName);
    core.getObject('txtPassword').val(Password);
    core.getObject('txtFullname').val(Fullname);
    core.getObject('txtBirthDate').val(BirthDate);
    core.getObject('txtAddress').val(Address);
    core.getObject('txtPhone').val(Phone);
    core.getObject('txtEmail').val(Email);
    core.getObject('txtSex').val(Sex);
    core.getObject('txtIdentity').val(Identity);
    core.getObject('txtRoleID').val(RoleID);
    core.getObject('txtUserRankID').val(UserRankID);
    core.getObject('txtAvatar').val(Avatar);
    core.getObject('txtAccountID').val(AccountID);
    core.getObject('txtIsActived').val(IsActived);
    core.getObject("adddocmode")[0].value = EDIT_MODE;
    core.getObject("status-add")[0].innerHTML = 'Edit mode';
    }
    else  // Duplicate
    {
    popDiv.alert(MSG_RES_OPERATION_FAIL, SYSTEM_TITLE_ERROR, 1);
    }
    }
    }
    }
    
    this.showAddMode = showAddMode;
    function showAddMode() {
    core.getObject("adddocmode")[0].value = ADD_MODE;
    core.getObject("status-add")[0].innerHTML = 'Add mode';
    core.getObject('txtUserID').val('');
    core.getObject('txtUserName').val('');
    core.getObject('txtPassword').val('');
    core.getObject('txtFullname').val('');
    core.getObject('txtBirthDate').val('');
    core.getObject('txtAddress').val('');
    core.getObject('txtPhone').val('');
    core.getObject('txtEmail').val('');
    core.getObject('txtSex').val('');
    core.getObject('txtIdentity').val('');
    core.getObject('txtRoleID').val('');
    core.getObject('txtUserRankID').val('');
    core.getObject('txtAvatar').val('');
    core.getObject('txtAccountID').val('');
    core.getObject('txtIsActived').val('');
    }
    //endregion   
    */
}
