<%------------------------------------------------------------------------------------------
* Author: Eric J. Smith 
* Description: This template will generate standard CRUD stored procedures for a given 
*   database table.
------------------------------------------------------------------------------------------%>
<%@ CodeTemplate Debug="True" Language="C#" Inherits="CodeSmith.BaseTemplates.SqlCodeTemplate" TargetLanguage="T-SQL"
	Description="Generates standard CRUD procedures based on a database table schema." %>

<%-- Assembly References --%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="System.Data" %>
<%-- Namespace Imports --%>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="CodeSmith.BaseTemplates" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="System" %>
<%@ Assembly Name="SchemaExplorer" %> 
<%@ Assembly Name="System.Design" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System" %>
<%@ Import Namespace="System.Windows.Forms" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer.Design" %>
<%@ Import Namespace="System.IO" %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Source" Optional="True" %>/*
 * This file was automatically generated By Code Smith 
 * Modifications will be overwritten when code smith is run
 *
 * PLEASE DO NOT MAKE MODIFICATIONS TO THIS FILE
 * Date Created 5/6/2012<%//= //DateTime.Now %>
 *
 */



/// <summary>
/// Implementations of <%= GetCollectionName(SourceTable) %> represent a <%= GetClassName(SourceTable) %>
///
/// </summary>
function <%= GetClassName(SourceTable) %>()
{		   
	//region PRESERVE ExtraMethods For <%= GetClassName(SourceTable) %>
	//endregion
    //region Contants	
    var ACT_ADD = 10;
    var ACT_UPDATE = 11;
    var ACT_DELETE = 12;
    var ACT_CHANGE_PAGE = 13;
    var ACT_SHOW_EDIT = 14;
    var ACT_GET = 15;
    var _strPage = "admin_<%= GetPageName(SourceTable.Name) %>.php";
    
   
    //endregion   
    
    //region Public Functions
    
    this.btnSave_OnClick = btnSave_OnClick;
    function btnSave_OnClick() {
        core.disableControl("btnOK", true);
        var isValid = true;
        <% GenerateValidates(SourceTable.Columns, 2);%>
       
        if (isValid == false) {
         core.disableControl("btnOK", false);
            return;
        }
         
        if (core.getObject("adddocmode")[0].value == ADD_MODE) {
            insertNew();
        }
        else {
            edit();
        }
    }
    
    this.edit = edit;
    function edit() {
        <% GenerateGetValues(SourceTable.Columns, 2);%>
                
        strRequest = "?isAJ=1&act=" + ACT_UPDATE +  
            <% GeneratePostValues(SourceTable.Columns, 3);%>;
        
        var ajax = new Ajax();
        ajax.SendRequestToServerWithCustomMsg(_strPage, strRequest, edit_OnCallBack, true, MSG_AJAX_FETCHING_VN);
    }

    function edit_OnCallBack(xmlHTTPRequest) {
        core.disableControl("btnOK", false);
        if (xmlHTTPRequest.readyState == 4) {
            if (xmlHTTPRequest.status == 200) {
                var strRespond = core.parserXML(xmlHTTPRequest.responseText);
                if (!core.headerProcessingArr(strRespond[0], Array(true, true, false))) {
                    // ph?i kh?i t?o l?i d? tr?nh d?ng popdiv addFavourite
                    //var popDiv = new PopDiv();
                    //popDiv.init();
                    popDiv.alert(MSG_RES_OPERATION_FAIL, SYSTEM_TITLE_ERROR, 1);
                    return;
                }
                if (parseInt(strRespond[1]['rs']) == 1) {
                    showInfoBar('success', strRespond[1]["inf"]);
                    showAddMode();
                    changePage(_strPage, ACT_CHANGE_PAGE, core.getObject("txtPage").val());
                }
                else {
                    //var popDiv = new PopDiv();
                    //popDiv.init();
                    top.popDiv.childPop.alert(strRespond[1]["inf"], SYSTEM_TITLE_ERROR, 1);
                }
            }
        }
    }
    
    this.insertNew = insertNew;
    function insertNew() {
        <% GenerateGetValues(SourceTable.Columns, 2);%>
        
        strRequest = "?isAJ=1&act=" + ACT_ADD +  
            <% GeneratePostValues(SourceTable.Columns, 3);%>;
        
        var ajax = new Ajax();
        ajax.SendRequestToServerWithCustomMsg(_strPage, strRequest, insertNew_OnCallBack, true, MSG_AJAX_FETCHING_VN);
    }

    function insertNew_OnCallBack(xmlHTTPRequest) {
        core.disableControl("btnOK", false);
        if (xmlHTTPRequest.readyState == 4) {
            if (xmlHTTPRequest.status == 200) {
                var strRespond = core.parserXML(xmlHTTPRequest.responseText);
                if (!core.headerProcessingArr(strRespond[0], Array(true, true, false))) {
                    // ph?i kh?i t?o l?i d? tr?nh d?ng popdiv addFavourite
                    //var popDiv = new PopDiv();
                    //popDiv.init();
                    popDiv.alert(MSG_RES_OPERATION_FAIL, SYSTEM_TITLE_ERROR, 1);
                    return;
                }
                if (parseInt(strRespond[1]['rs']) == 1) {
                    showInfoBar('success', strRespond[1]["inf"]);
                    showAddMode();
                    changePage(_strPage, ACT_CHANGE_PAGE, 1);
                }
                else {
                    //var popDiv = new PopDiv();
                    //popDiv.init();
                    top.popDiv.childPop.alert(strRespond[1]["inf"], SYSTEM_TITLE_ERROR, 1);
                }
            }
        }
    }
    
    var _cacheURL_pdoc;
    this.deleteObj = deleteObj;
    function deleteObj(id, name) {
        //curRow = currentRowId;
        popDiv.alert('Do you want to delete ' + name + ' ?', SYSTEM_TITLE_ERROR, 2, "<%= GetGlobalVariable(SourceTable.Name)%>.delete_OK()", "<%= GetGlobalVariable(SourceTable.Name)%>.delete_Cancel()");

        var keyword = '';
        if (typeof core.getObject("txtGet") != 'undefined') {
            keyword = core.getObject("txtGet").val();
        }
      
        _cacheURL_pdoc = _strPage + "?isAJ=1&act=" + ACT_DELETE + "&id=" + docid + "&p=" + core.getObject("txtPage")[0].value + "&kw=" + keyword;
    }
    this.delete_Cancel = delete_Cancel;
    function delete_Cancel() {
        //core.getObject("adddocmode")[0].value = ADD_MODE;
    }
    this.delete_OK = delete_OK;
    function delete_OK() {
        // Prepare AJAX to remove selected doc from favorite list
        var ajax = new Ajax(METHOD_GET);
        ajax.SendRequestToServerWithCustomMsg(_cacheURL_pdoc, null, delete_OnCallBack, true, MSG_AJAX_FETCHING_VN);
    }
    function delete_OnCallBack(xmlHTTPRequest) {

        if (xmlHTTPRequest.readyState == 4) {
            if (xmlHTTPRequest.status == 200) {
                var strRespond = core.parserXML(xmlHTTPRequest.responseText);

                if (!core.headerProcessingArr(strRespond[0], Array(true, true, false))) {
                    popDiv.alert(MSG_RES_OPERATION_FAIL, SYSTEM_TITLE_ERROR, 1);
                    return;
                }
                if (parseInt(strRespond[1]['rs']) == 1) {
                    parent.window.showInfoBar('success', strRespond[1]["inf"]);
                    core.getObject("txtPage")[0].value = strRespond[1]["p"];
                    popDiv.hide();
                    core.getObject("list-content")[0].innerHTML = strRespond[1]['list'];
                }
                else //if(parseInt(strRespond[3]) == -1)
                {
                    popDiv.alert(MSG_RES_OPERATION_FAIL, SYSTEM_TITLE_ERROR, 1);
                }
            }
        }
    }
    
    this.showEdit = showEdit;
    function showEdit(strID) {
        showAddMode();
        strRequest = "?isAJ=1&act=" + ACT_SHOW_EDIT + "&id=" + strID; ;
        var ajax = new Ajax(METHOD_GET);
        ajax.SendRequestToServerWithCustomMsg(_strPage + strRequest, null, showEdit_OnCallBack, true, MSG_AJAX_FETCHING_VN);

    }
    function showEdit_OnCallBack(xmlHTTPRequest) {

        if (xmlHTTPRequest.readyState == 4) {
            if (xmlHTTPRequest.status == 200) {
                var strRespond = core.parserXML(xmlHTTPRequest.responseText);
                if (!core.headerProcessingArr(strRespond[0], Array(true, true, false))) {
                    popDiv.alert(MSG_RES_OPERATION_FAIL, SYSTEM_TITLE_ERROR, 1);
                    return;
                }
                if (parseInt(strRespond[1]['rs']) == 1) {
                    showInfoBar('success', MSG_RES_OPERATION_SUCCESS);
                    //alert(strRespond[1]['sens']);
                    // Add Doc && clear field
                    <% GenerateShowEdit(SourceTable.Columns, 5);%>
                    core.getObject("adddocmode")[0].value = EDIT_MODE;
                    core.getObject("status-add")[0].innerHTML = 'Edit mode';
                }
                else  // Duplicate
                {
                    popDiv.alert(MSG_RES_OPERATION_FAIL, SYSTEM_TITLE_ERROR, 1);
                }
            }
        }
    }
    
    this.showAddMode = showAddMode;
    function showAddMode() {
        core.getObject("adddocmode")[0].value = ADD_MODE;
        core.getObject("status-add")[0].innerHTML = 'Add mode';
        <% GenerateAddModes(SourceTable.Columns, 2);%>
    }
    //endregion   
}
var <%= GetGlobalVariable(SourceTable.Name) %> = new  <%= GetClassName(SourceTable) %>();
<script runat="template">
/*
public static string GetClassName(string name)
{									
	if(name.EndsWith("s") && !name.EndsWith("ss"))
	{
		name = name.Substring(0,name.Length - 1);
	}
	if(name.EndsWith("sse"))
	{
		name = name.Substring(0,name.Length - 1);
	}
	name = name.Replace("_","");
    return name.Replace(" ","");			
}*/
public static string GetGlobalVariable(string name)
{
    return "_obj"+GetClassName(name);
}
public static string GetClassName(string name)
{									
	if(name.EndsWith("s") && !name.EndsWith("ss"))
	{
		//name = name.Substring(0,name.Length - 1);
	}
	if(name.EndsWith("sse"))
	{
		name = name.Substring(0,name.Length - 1);
	}
	int index = name.IndexOf("_");
    if(name.Length >= index + 1){
        name = name.Substring(index+1);
        index = name.IndexOf("_");
        while(index != -1)
        {
            if(name.Length >= index + 2){
                name =  name.Substring(0,index)+ name[index+1].ToString().ToUpper() + name.Substring(index+2);
                index = name.IndexOf("_");
            }
            else
            {
                index = -1;
            }
        }
    }
   
    //index = name.IndexOf("-");
   // name = name.Substring(index+1);
    name  = name.Replace(" ","");			
    return name[0].ToString().ToUpper() + name.Substring(1);;
}

public static string GetPageName(string name)
{									
	if(name.EndsWith("s") && !name.EndsWith("ss"))
	{
		//name = name.Substring(0,name.Length - 1);
	}
	if(name.EndsWith("sse"))
	{
		name = name.Substring(0,name.Length - 1);
	}
	int index = name.IndexOf("_");
    if(name.Length >= index + 1){
        name = name.Substring(index+1);
        index = name.IndexOf("_");
        while(index != -1)
        {
            if(name.Length >= index + 2){
                name =  name.Substring(0,index)+ name[index+1].ToString().ToUpper() + name.Substring(index+2);
                index = name.IndexOf("_");
            }
            else
            {
                index = -1;
            }
        }
    }
   
    //index = name.IndexOf("-");
   // name = name.Substring(index+1);
    name  = name.Replace(" ","");			
    return name;
}


public static string GetCollectionName(string name)
{			 			
	if(!name.EndsWith("s"))
	{
		name = name + "s";
	}
	if(name.EndsWith("ss"))
	{
		name = name + "es";
	}
	name = name.Replace("_","");
    return name.Replace(" ","");
	
}	
public static string GetClassName(TableSchema table)
{
	return GetClassName(table.Name); 
}

public static string GetTableName(TableSchema table,bool isUpper)
{
    if(isUpper)
    {
	    return table.Name.ToUpper();
    }
    else    
    {
        return table.Name.ToLower();
    }
}

public static string GetCollectionName(TableSchema table)
{			
	return GetCollectionName(table.Name);			
}

public static string GetMemberVariableDeclarationStatement(
			string protectionLevel, ColumnSchema column)
{
	string statement = protectionLevel + " ";
	statement += (column.AllowDBNull ? "object" : GetCSharpVariableType(column)) + " " + GetMemberVariableName(column);			
	
        string defaultValue = GetMemberVariableDefaultValue(column);
	    if (defaultValue != "" && !column.AllowDBNull)
	    {
		    statement += " = " + defaultValue;
	    }

	statement += ";";
	
	return statement;
}
public static string GetCSharpVariableType(ColumnSchema column)
{
	if (column.Name.EndsWith("TypeCode")) return column.Name;

	switch (column.DataType)
	{
		case DbType.AnsiString: return "string";
		case DbType.AnsiStringFixedLength: return "string";
		case DbType.Binary: return "byte[]";
		case DbType.Boolean: return "bool";
		case DbType.Byte: return "byte";
		case DbType.Currency: return "decimal";
		case DbType.Date: return "DateTime";
		case DbType.DateTime: return "DateTime";
		case DbType.Decimal: return "decimal";
		case DbType.Double: return "double";
		case DbType.Guid: return "Guid";
		case DbType.Int16: return "short";
		case DbType.Int32: return "int";
		case DbType.Int64: return "long";
		case DbType.Object: return "object";
		case DbType.SByte: return "sbyte";
		case DbType.Single: return "float";
		case DbType.String: return "string";
		case DbType.StringFixedLength: return "string";
		case DbType.Time: return "TimeSpan";
		case DbType.UInt16: return "ushort";
		case DbType.UInt32: return "uint";
		case DbType.UInt64: return "ulong";
		case DbType.VarNumeric: return "decimal";
		default:
		{
			return "__UNKNOWN__" + column.NativeType;
		}
	}
}
public static string GetMemberVariableName(ColumnSchema column)
{
	string propertyName = GetPropertyName(column);
	string memberVariableName = "_" + GetCamelCaseName(propertyName);

	return memberVariableName;
}
public static string GetPropertyName(ColumnSchema column)
{
	string propertyName = column.Name;			

	if (propertyName.EndsWith("TypeCode")) propertyName = propertyName.Substring(0, propertyName.Length - 4);

	return propertyName;
}
public static string GetPropertyVariable(ColumnSchema column)
{
	string propertyName = column.Name;			

	if (propertyName.EndsWith("TypeCode")) propertyName = propertyName.Substring(0, propertyName.Length - 4);

	return propertyName[0].ToString().ToLower() + propertyName.Substring(1);
}
public static string GetMemberVariableDefaultValue(ColumnSchema column)
{			
	switch (column.DataType)
	{
		case DbType.Guid:
		{
			return "Guid.Empty";
		}
		case DbType.AnsiString:
		case DbType.AnsiStringFixedLength:
		case DbType.String:
		case DbType.StringFixedLength:
		{
			return "String.Empty";
		}
		default:
		{
			return "";
		}
	}
}

public static string GetCamelCaseName(string value)
{
	return value.Substring(0, 1).ToLower() + value.Substring(1);
}
public static string GetMemberVariableDeclarationStatement(ColumnSchema column)
{
	return GetMemberVariableDeclarationStatement("private", column);
}

public static string GetMemberListVariableContructor(TableSchema table)
{
	string str="";
	string strType;
	string strVar;
	for (int i = 0; i < table.Columns.Count; i++)
	{
			strType= GetCSharpVariableType(table.Columns[i]);
			strVar = table.Columns[i].Name;
			str += strType +" m_"+ strVar + ",";
	}
	str = str.Substring(0,str.Length-1);
	return str;
}

public static string GetMemberVariableContructor(ColumnSchema column)
{	
	return " m_"+ column.Name ;
}

#region Code Generation Helpers
public string GetTableOwner()
{
	return GetTableOwner(true);
}

public string GetTableOwner(bool includeDot)
{
	if (SourceTable.Owner.Length > 0)
	{
		if (includeDot)
		{
			return "[" + SourceTable.Owner + "].";
		}
		else
		{
			return "[" + SourceTable.Owner + "]";
		}
	}
	else
	{
		return "";
	}
}

public void GenerateIndent(int indentLevel)
{
    for (int i = 0; i < indentLevel; i++)
	{
		Response.Write('\t');
	}
}

public void GenerateValidates(ColumnSchemaCollection columns, int indentLevel)
{
    Response.WriteLine("");
   	ColumnSchemaCollection filteredColumns = columns;
    int noPrimaryColumn=1;
    string primaryColumn="";
	for (int i = 0; i < filteredColumns.Count; i++)
	{       
        if(filteredColumns[i].Name != "CreatedBy" && filteredColumns[i].Name != "CreatedDate" 
        && filteredColumns[i].Name != "ModifiedBy" && filteredColumns[i].Name != "ModifiedDate"
        && filteredColumns[i].Name != "DeletedBy" && filteredColumns[i].Name != "DeletedDate"
        && filteredColumns[i].Name != "IsDeleted" )
        {
		    GenerateValidate(filteredColumns[i], indentLevel);
        }
	}
    GenerateIndent(indentLevel-1);
   
}

public void GenerateValidate(ColumnSchema column, int indentLevel)
{
    string variable = GetPropertyVariable(column);
    string fieldName = column.Name;
	GenerateIndent(indentLevel);
    Response.Write("var ");
	Response.Write(variable);
	Response.WriteLine(" = core.trim(core.getObject(\"txt"+fieldName+"\").val());");
    GenerateIndent(indentLevel);
    Response.WriteLine("core.ValidateInputTextBox('txt"+fieldName+"','');");
    GenerateIndent(indentLevel);
    Response.WriteLine("if("+variable+" == ''){");
    GenerateIndent(indentLevel+1);
    Response.WriteLine("core.ValidateInputTextBox('txt"+fieldName+"','"+fieldName+" is required"+"', isValid);");
    GenerateIndent(indentLevel+1);
    Response.WriteLine("isValid =  false;");
    GenerateIndent(indentLevel);
    Response.Write("}");
    if(column.NativeType == "varchar")
    {
        Response.WriteLine("else if ("+variable+".length > "+column.Size / 3 +") {");
        GenerateIndent(indentLevel+1);
        Response.WriteLine("core.ValidateInputTextBox('txt"+fieldName+"','"+fieldName+" must be less than "+column.Size / 3 +"', isValid);");
        GenerateIndent(indentLevel+1);
        Response.WriteLine("isValid =  false;");
        GenerateIndent(indentLevel);
        Response.WriteLine("}");
    }
    else if(column.NativeType == "int")
    {
        Response.WriteLine("else if ("+variable+".length > 12) {");
        GenerateIndent(indentLevel+1);
        Response.WriteLine("core.ValidateInputTextBox('txt"+fieldName+"','"+fieldName+" must be less than "+column.Size / 3 +"', isValid);");
        GenerateIndent(indentLevel+1);
        Response.WriteLine("isValid =  false;");
        GenerateIndent(indentLevel);
        Response.WriteLine("}");   
    
        Response.WriteLine("else if (core.isInteger("+variable+")) {");
        GenerateIndent(indentLevel+1);
        Response.WriteLine("core.ValidateInputTextBox('txt"+fieldName+"','"+fieldName+" is invalid', isValid);");
        GenerateIndent(indentLevel);
        Response.WriteLine("}");
    }
    else if(column.NativeType == "datetime")
    {
        Response.WriteLine("else if (core.ValidateDateTime("+variable+") == false) {");
        GenerateIndent(indentLevel+1);
        Response.WriteLine("core.getObject('txt"+fieldName+"')[0].focus();");
        GenerateIndent(indentLevel+1);
        Response.WriteLine("strError += '<p>"+fieldName+" is invalid!</p>';");
        GenerateIndent(indentLevel);
        Response.WriteLine("}");          
    }
    Response.WriteLine("");
}

public void GenerateGetValues(ColumnSchemaCollection columns, int indentLevel)
{
    Response.WriteLine("");
   	ColumnSchemaCollection filteredColumns = columns;
    int noPrimaryColumn=1;
    string primaryColumn="";
	for (int i = 0; i < filteredColumns.Count; i++)
	{       
        if(filteredColumns[i].Name != "CreatedBy" && filteredColumns[i].Name != "CreatedDate" 
        && filteredColumns[i].Name != "ModifiedBy" && filteredColumns[i].Name != "ModifiedDate"
        && filteredColumns[i].Name != "DeletedBy" && filteredColumns[i].Name != "DeletedDate"
        && filteredColumns[i].Name != "IsDeleted" )
        {
		    GenerateGetValue(filteredColumns[i], indentLevel);
        }
	}
    GenerateIndent(indentLevel-1);
   
}

public void GenerateGetValue(ColumnSchema column, int indentLevel)
{
    string variable = GetPropertyVariable(column);
    string fieldName = column.Name;
	GenerateIndent(indentLevel);
    Response.Write("var ");
	Response.Write(variable);
	Response.WriteLine(" = core.trim(core.getObject(\"txt"+fieldName+"\").val());");
}

public void GeneratePostValues(ColumnSchemaCollection columns, int indentLevel)
{
   	ColumnSchemaCollection filteredColumns = columns;
    int noPrimaryColumn=1;
    string primaryColumn="";
	for (int i = 0; i < filteredColumns.Count; i++)
	{       
        if(filteredColumns[i].Name != "CreatedBy" && filteredColumns[i].Name != "CreatedDate" 
        && filteredColumns[i].Name != "ModifiedBy" && filteredColumns[i].Name != "ModifiedDate"
        && filteredColumns[i].Name != "DeletedBy" && filteredColumns[i].Name != "DeletedDate"
        && filteredColumns[i].Name != "IsDeleted" )
        {
            if(i!= 0 )
            {
               Response.WriteLine("");
               GenerateIndent(indentLevel);
               
            }
		    GeneratePostValue(filteredColumns[i], indentLevel);
            if(i != filteredColumns.Count - 1)
            {
                  Response.Write("+");
            }
        }
	}
    GenerateIndent(indentLevel-1);
   
}

public void GeneratePostValue(ColumnSchema column, int indentLevel)
{
    string variable = GetPropertyVariable(column);
    string fieldName = column.Name;
    Response.Write("'&"+fieldName+"='");
	Response.Write("+ core.urlencode("+variable+")");
}

public void GenerateAddModes(ColumnSchemaCollection columns, int indentLevel)
{
   	ColumnSchemaCollection filteredColumns = columns;
    int noPrimaryColumn=1;
    string primaryColumn="";
	for (int i = 0; i < filteredColumns.Count; i++)
	{       
        if(filteredColumns[i].Name != "CreatedBy" && filteredColumns[i].Name != "CreatedDate" 
        && filteredColumns[i].Name != "ModifiedBy" && filteredColumns[i].Name != "ModifiedDate"
        && filteredColumns[i].Name != "DeletedBy" && filteredColumns[i].Name != "DeletedDate"
        && filteredColumns[i].Name != "IsDeleted" )
        {
            GenerateIndent(indentLevel);
            Response.WriteLine("core.getObject('txt"+filteredColumns[i].Name+"').val('');");
        }
	}
}

public void GenerateShowEdit(ColumnSchemaCollection columns, int indentLevel)
{
   	ColumnSchemaCollection filteredColumns = columns;
    int noPrimaryColumn=1;
    string primaryColumn="";
	for (int i = 0; i < filteredColumns.Count; i++)
	{       
        if(filteredColumns[i].Name != "CreatedBy" && filteredColumns[i].Name != "CreatedDate" 
        && filteredColumns[i].Name != "ModifiedBy" && filteredColumns[i].Name != "ModifiedDate"
        && filteredColumns[i].Name != "DeletedBy" && filteredColumns[i].Name != "DeletedDate"
        && filteredColumns[i].Name != "IsDeleted" )
        {
            GenerateIndent(indentLevel);
            Response.WriteLine("core.getObject('txt"+filteredColumns[i].Name+"').val("+filteredColumns[i].Name+");");
        }
	}
}

#endregion

#region Procedure Naming

public string GetBySuffix(ColumnSchemaCollection columns)
{
    System.Text.StringBuilder bySuffix = new System.Text.StringBuilder();
	for (int i = 0; i < columns.Count; i++)
	{
	    if (i > 0) bySuffix.Append("And");
	    bySuffix.Append(columns[i].Name);
	}
	
	return bySuffix.ToString();
}
#endregion

#region Template Overrides
// Assign an appropriate file name to the output.
public override string GetFileName()
{
	if (this.SourceTable != null)
	{
		return this.SourceTable.Name + "_Procedures.sql";
	}
	else
	{
		return base.GetFileName();
	}
}

// Override the OutputFile property and assign our specific settings to it.
[Category("2. Options")]
[FileDialog(FileDialogType.Save, Title="Select Output File", Filter="Query Files (*.sql)|*.sql|All Files (*.*)|*.*", DefaultExtension=".sql")]
public override string OutputFile
{
	get {return base.OutputFile;}
	set {base.OutputFile = value;}
}

private void cn_InfoMessage(object sender, System.Data.SqlClient.SqlInfoMessageEventArgs e)
{
	Trace.WriteLine(e.Message);
}
#endregion 
</script>